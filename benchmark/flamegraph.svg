<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="194536"><g><title>hello_kafka`&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (76 samples, 0.04%)</title><rect x="0.0005%" y="389" width="0.0391%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="76"/><text x="0.2505%" y="399.50"></text></g><g><title>hello_kafka`DYLD-STUB$$memcpy (65 samples, 0.03%)</title><rect x="0.0396%" y="389" width="0.0334%" height="15" fill="rgb(217,0,24)" fg:x="77" fg:w="65"/><text x="0.2896%" y="399.50"></text></g><g><title>hello_kafka`bytes::bytes::Bytes::copy_from_slice (81 samples, 0.04%)</title><rect x="0.0730%" y="389" width="0.0416%" height="15" fill="rgb(221,193,54)" fg:x="142" fg:w="81"/><text x="0.3230%" y="399.50"></text></g><g><title>hello_kafka`core::ptr::drop_in_place&lt;kafkas::producer::Producer&lt;kafkas::executor::TokioExecutor&gt;::send&lt;hello_kafka::TestData,&amp;str&gt;::{{closure}}&gt; (29 samples, 0.01%)</title><rect x="0.1146%" y="389" width="0.0149%" height="15" fill="rgb(248,212,6)" fg:x="223" fg:w="29"/><text x="0.3646%" y="399.50"></text></g><g><title>hello_kafka`dashmap::DashMap&lt;K,V,S&gt;::get (34 samples, 0.02%)</title><rect x="0.1295%" y="389" width="0.0175%" height="15" fill="rgb(208,68,35)" fg:x="252" fg:w="34"/><text x="0.3795%" y="399.50"></text></g><g><title>hello_kafka`futures_channel::mpsc::decode_state (53 samples, 0.03%)</title><rect x="7.0815%" y="357" width="0.0272%" height="15" fill="rgb(232,128,0)" fg:x="13776" fg:w="53"/><text x="7.3315%" y="367.50"></text></g><g><title>hello_kafka`futures_channel::mpsc::encode_state (117 samples, 0.06%)</title><rect x="7.1087%" y="357" width="0.0601%" height="15" fill="rgb(207,160,47)" fg:x="13829" fg:w="117"/><text x="7.3587%" y="367.50"></text></g><g><title>hello_kafka`futures_core::task::__internal::atomic_waker::AtomicWaker::wake (2,217 samples, 1.14%)</title><rect x="7.1689%" y="357" width="1.1396%" height="15" fill="rgb(228,23,34)" fg:x="13946" fg:w="2217"/><text x="7.4189%" y="367.50"></text></g><g><title>hello_kafka`&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (10,063 samples, 5.17%)</title><rect x="5.3142%" y="373" width="5.1728%" height="15" fill="rgb(218,30,26)" fg:x="10338" fg:w="10063"/><text x="5.5642%" y="383.50">hello_..</text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4,237 samples, 2.18%)</title><rect x="8.3090%" y="357" width="2.1780%" height="15" fill="rgb(220,122,19)" fg:x="16164" fg:w="4237"/><text x="8.5590%" y="367.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (35 samples, 0.02%)</title><rect x="10.4690%" y="341" width="0.0180%" height="15" fill="rgb(250,228,42)" fg:x="20366" fg:w="35"/><text x="10.7190%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (21 samples, 0.01%)</title><rect x="10.4762%" y="325" width="0.0108%" height="15" fill="rgb(240,193,28)" fg:x="20380" fg:w="21"/><text x="10.7262%" y="335.50"></text></g><g><title>hello_kafka`DYLD-STUB$$memcmp (32 samples, 0.02%)</title><rect x="10.4983%" y="373" width="0.0164%" height="15" fill="rgb(216,20,37)" fg:x="20423" fg:w="32"/><text x="10.7483%" y="383.50"></text></g><g><title>hello_kafka`DYLD-STUB$$memcpy (91 samples, 0.05%)</title><rect x="10.5148%" y="373" width="0.0468%" height="15" fill="rgb(206,188,39)" fg:x="20455" fg:w="91"/><text x="10.7648%" y="383.50"></text></g><g><title>hello_kafka`__rdl_alloc (167 samples, 0.09%)</title><rect x="10.5615%" y="373" width="0.0858%" height="15" fill="rgb(217,207,13)" fg:x="20546" fg:w="167"/><text x="10.8115%" y="383.50"></text></g><g><title>hello_kafka`__rust_alloc (41 samples, 0.02%)</title><rect x="10.6474%" y="373" width="0.0211%" height="15" fill="rgb(231,73,38)" fg:x="20713" fg:w="41"/><text x="10.8974%" y="383.50"></text></g><g><title>hello_kafka`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (67 samples, 0.03%)</title><rect x="10.6685%" y="373" width="0.0344%" height="15" fill="rgb(225,20,46)" fg:x="20754" fg:w="67"/><text x="10.9185%" y="383.50"></text></g><g><title>hello_kafka`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (211 samples, 0.11%)</title><rect x="10.8962%" y="357" width="0.1085%" height="15" fill="rgb(210,31,41)" fg:x="21197" fg:w="211"/><text x="11.1462%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3,682 samples, 1.89%)</title><rect x="11.0052%" y="357" width="1.8927%" height="15" fill="rgb(221,200,47)" fg:x="21409" fg:w="3682"/><text x="11.2552%" y="367.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (32 samples, 0.02%)</title><rect x="12.8814%" y="341" width="0.0164%" height="15" fill="rgb(226,26,5)" fg:x="25059" fg:w="32"/><text x="13.1314%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (27 samples, 0.01%)</title><rect x="12.8840%" y="325" width="0.0139%" height="15" fill="rgb(249,33,26)" fg:x="25064" fg:w="27"/><text x="13.1340%" y="335.50"></text></g><g><title>hello_kafka`bytes::bytes::Bytes::copy_from_slice (4,433 samples, 2.28%)</title><rect x="10.7029%" y="373" width="2.2788%" height="15" fill="rgb(235,183,28)" fg:x="20821" fg:w="4433"/><text x="10.9529%" y="383.50">h..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (163 samples, 0.08%)</title><rect x="12.8979%" y="357" width="0.0838%" height="15" fill="rgb(221,5,38)" fg:x="25091" fg:w="163"/><text x="13.1479%" y="367.50"></text></g><g><title>hello_kafka`core::hash::Hasher::write_str (66 samples, 0.03%)</title><rect x="12.9817%" y="373" width="0.0339%" height="15" fill="rgb(247,18,42)" fg:x="25254" fg:w="66"/><text x="13.2317%" y="383.50"></text></g><g><title>hello_kafka`core::ptr::drop_in_place&lt;kafkas::producer::Producer&lt;kafkas::executor::TokioExecutor&gt;::send&lt;hello_kafka::TestData,&amp;str&gt;::{{closure}}&gt; (211 samples, 0.11%)</title><rect x="13.0161%" y="373" width="0.1085%" height="15" fill="rgb(241,131,45)" fg:x="25321" fg:w="211"/><text x="13.2661%" y="383.50"></text></g><g><title>hello_kafka`core::hash::Hasher::write_str (247 samples, 0.13%)</title><rect x="14.2688%" y="357" width="0.1270%" height="15" fill="rgb(249,31,29)" fg:x="27758" fg:w="247"/><text x="14.5188%" y="367.50"></text></g><g><title>hello_kafka`dashmap::DashMap&lt;K,V,S&gt;::get (2,766 samples, 1.42%)</title><rect x="13.1246%" y="373" width="1.4218%" height="15" fill="rgb(225,111,53)" fg:x="25532" fg:w="2766"/><text x="13.3746%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (293 samples, 0.15%)</title><rect x="14.3958%" y="357" width="0.1506%" height="15" fill="rgb(238,160,17)" fg:x="28005" fg:w="293"/><text x="14.6458%" y="367.50"></text></g><g><title>hello_kafka`futures_channel::mpsc::decode_state (78 samples, 0.04%)</title><rect x="14.5567%" y="373" width="0.0401%" height="15" fill="rgb(214,148,48)" fg:x="28318" fg:w="78"/><text x="14.8067%" y="383.50"></text></g><g><title>hello_kafka`futures_channel::mpsc::encode_state (27 samples, 0.01%)</title><rect x="14.5968%" y="373" width="0.0139%" height="15" fill="rgb(232,36,49)" fg:x="28396" fg:w="27"/><text x="14.8468%" y="383.50"></text></g><g><title>hello_kafka`futures_core::task::__internal::atomic_waker::AtomicWaker::wake (43 samples, 0.02%)</title><rect x="14.6107%" y="373" width="0.0221%" height="15" fill="rgb(209,103,24)" fg:x="28423" fg:w="43"/><text x="14.8607%" y="383.50"></text></g><g><title>hello_kafka`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (78 samples, 0.04%)</title><rect x="15.2450%" y="357" width="0.0401%" height="15" fill="rgb(229,88,8)" fg:x="29657" fg:w="78"/><text x="15.4950%" y="367.50"></text></g><g><title>hello_kafka`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (649 samples, 0.33%)</title><rect x="16.9444%" y="341" width="0.3336%" height="15" fill="rgb(213,181,19)" fg:x="32963" fg:w="649"/><text x="17.1944%" y="351.50"></text></g><g><title>hello_kafka`hashbrown::map::make_hash (1,603 samples, 0.82%)</title><rect x="17.2780%" y="341" width="0.8240%" height="15" fill="rgb(254,191,54)" fg:x="33612" fg:w="1603"/><text x="17.5280%" y="351.50"></text></g><g><title>hello_kafka`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (635 samples, 0.33%)</title><rect x="17.7756%" y="325" width="0.3264%" height="15" fill="rgb(241,83,37)" fg:x="34580" fg:w="635"/><text x="18.0256%" y="335.50"></text></g><g><title>hello_kafka`&lt;dashmap::DashMap&lt;K,V,S&gt; as dashmap::t::Map&lt;K,V,S&gt;&gt;::_get (5,901 samples, 3.03%)</title><rect x="15.2851%" y="357" width="3.0334%" height="15" fill="rgb(233,36,39)" fg:x="29735" fg:w="5901"/><text x="15.5351%" y="367.50">hel..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (421 samples, 0.22%)</title><rect x="18.1020%" y="341" width="0.2164%" height="15" fill="rgb(226,3,54)" fg:x="35215" fg:w="421"/><text x="18.3520%" y="351.50"></text></g><g><title>hello_kafka`dashmap::DashMap&lt;K,V,S&gt;::get (49 samples, 0.03%)</title><rect x="18.3277%" y="357" width="0.0252%" height="15" fill="rgb(245,192,40)" fg:x="35654" fg:w="49"/><text x="18.5777%" y="367.50"></text></g><g><title>hello_kafka`hashbrown::map::make_hash (42 samples, 0.02%)</title><rect x="18.3529%" y="357" width="0.0216%" height="15" fill="rgb(238,167,29)" fg:x="35703" fg:w="42"/><text x="18.6029%" y="367.50"></text></g><g><title>hello_kafka`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (65 samples, 0.03%)</title><rect x="18.5590%" y="341" width="0.0334%" height="15" fill="rgb(232,182,51)" fg:x="36104" fg:w="65"/><text x="18.8090%" y="351.50"></text></g><g><title>hello_kafka`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (727 samples, 0.37%)</title><rect x="20.0868%" y="325" width="0.3737%" height="15" fill="rgb(231,60,39)" fg:x="39076" fg:w="727"/><text x="20.3368%" y="335.50"></text></g><g><title>hello_kafka`hashbrown::map::make_hash (1,574 samples, 0.81%)</title><rect x="20.4605%" y="325" width="0.8091%" height="15" fill="rgb(208,69,12)" fg:x="39803" fg:w="1574"/><text x="20.7105%" y="335.50"></text></g><g><title>hello_kafka`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (644 samples, 0.33%)</title><rect x="20.9385%" y="309" width="0.3310%" height="15" fill="rgb(235,93,37)" fg:x="40733" fg:w="644"/><text x="21.1885%" y="319.50"></text></g><g><title>hello_kafka`dashmap::DashMap&lt;K,V,S&gt;::get (5,531 samples, 2.84%)</title><rect x="18.5955%" y="341" width="2.8432%" height="15" fill="rgb(213,116,39)" fg:x="36175" fg:w="5531"/><text x="18.8455%" y="351.50">he..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (329 samples, 0.17%)</title><rect x="21.2696%" y="325" width="0.1691%" height="15" fill="rgb(222,207,29)" fg:x="41377" fg:w="329"/><text x="21.5196%" y="335.50"></text></g><g><title>hello_kafka`hashbrown::map::make_hash (38 samples, 0.02%)</title><rect x="21.4387%" y="341" width="0.0195%" height="15" fill="rgb(206,96,30)" fg:x="41706" fg:w="38"/><text x="21.6887%" y="351.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (50 samples, 0.03%)</title><rect x="21.4582%" y="341" width="0.0257%" height="15" fill="rgb(218,138,4)" fg:x="41744" fg:w="50"/><text x="21.7082%" y="351.50"></text></g><g><title>hello_kafka`kafkas::metadata::Cluster::partitions (6,104 samples, 3.14%)</title><rect x="18.3745%" y="357" width="3.1377%" height="15" fill="rgb(250,191,14)" fg:x="35745" fg:w="6104"/><text x="18.6245%" y="367.50">hel..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (55 samples, 0.03%)</title><rect x="21.4839%" y="341" width="0.0283%" height="15" fill="rgb(239,60,40)" fg:x="41794" fg:w="55"/><text x="21.7339%" y="351.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (40 samples, 0.02%)</title><rect x="21.5122%" y="357" width="0.0206%" height="15" fill="rgb(206,27,48)" fg:x="41849" fg:w="40"/><text x="21.7622%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (68 samples, 0.03%)</title><rect x="21.5328%" y="357" width="0.0350%" height="15" fill="rgb(225,35,8)" fg:x="41889" fg:w="68"/><text x="21.7828%" y="367.50"></text></g><g><title>hello_kafka`kafkas::client::Kafka&lt;Exe&gt;::partitions::_{{closure}} (14,212 samples, 7.31%)</title><rect x="14.6328%" y="373" width="7.3056%" height="15" fill="rgb(250,213,24)" fg:x="28466" fg:w="14212"/><text x="14.8828%" y="383.50">hello_kafk..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (721 samples, 0.37%)</title><rect x="21.5677%" y="357" width="0.3706%" height="15" fill="rgb(247,123,22)" fg:x="41957" fg:w="721"/><text x="21.8177%" y="367.50"></text></g><g><title>hello_kafka`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (82 samples, 0.04%)</title><rect x="22.1054%" y="357" width="0.0422%" height="15" fill="rgb(231,138,38)" fg:x="43003" fg:w="82"/><text x="22.3554%" y="367.50"></text></g><g><title>hello_kafka`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (720 samples, 0.37%)</title><rect x="23.6064%" y="341" width="0.3701%" height="15" fill="rgb(231,145,46)" fg:x="45923" fg:w="720"/><text x="23.8564%" y="351.50"></text></g><g><title>hello_kafka`hashbrown::map::make_hash (1,590 samples, 0.82%)</title><rect x="23.9765%" y="341" width="0.8173%" height="15" fill="rgb(251,118,11)" fg:x="46643" fg:w="1590"/><text x="24.2265%" y="351.50"></text></g><g><title>hello_kafka`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (684 samples, 0.35%)</title><rect x="24.4423%" y="325" width="0.3516%" height="15" fill="rgb(217,147,25)" fg:x="47549" fg:w="684"/><text x="24.6923%" y="335.50"></text></g><g><title>hello_kafka`dashmap::DashMap&lt;K,V,S&gt;::get (5,486 samples, 2.82%)</title><rect x="22.1481%" y="357" width="2.8200%" height="15" fill="rgb(247,81,37)" fg:x="43086" fg:w="5486"/><text x="22.3981%" y="367.50">he..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (339 samples, 0.17%)</title><rect x="24.7939%" y="341" width="0.1743%" height="15" fill="rgb(209,12,38)" fg:x="48233" fg:w="339"/><text x="25.0439%" y="351.50"></text></g><g><title>hello_kafka`hashbrown::map::make_hash (37 samples, 0.02%)</title><rect x="24.9681%" y="357" width="0.0190%" height="15" fill="rgb(227,1,9)" fg:x="48572" fg:w="37"/><text x="25.2181%" y="367.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (47 samples, 0.02%)</title><rect x="24.9871%" y="357" width="0.0242%" height="15" fill="rgb(248,47,43)" fg:x="48609" fg:w="47"/><text x="25.2371%" y="367.50"></text></g><g><title>hello_kafka`kafkas::metadata::Cluster::available_partitions (6,048 samples, 3.11%)</title><rect x="21.9384%" y="373" width="3.1089%" height="15" fill="rgb(221,10,30)" fg:x="42678" fg:w="6048"/><text x="22.1884%" y="383.50">hel..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (70 samples, 0.04%)</title><rect x="25.0113%" y="357" width="0.0360%" height="15" fill="rgb(210,229,1)" fg:x="48656" fg:w="70"/><text x="25.2613%" y="367.50"></text></g><g><title>hello_kafka`kafkas::metadata::Cluster::partitions (44 samples, 0.02%)</title><rect x="25.0473%" y="373" width="0.0226%" height="15" fill="rgb(222,148,37)" fg:x="48726" fg:w="44"/><text x="25.2973%" y="383.50"></text></g><g><title>hello_kafka`&lt;kafkas::producer::aggregator::RecordAggregator as kafkas::producer::aggregator::Aggregator&gt;::try_push (55 samples, 0.03%)</title><rect x="29.0152%" y="357" width="0.0283%" height="15" fill="rgb(234,67,33)" fg:x="56445" fg:w="55"/><text x="29.2652%" y="367.50"></text></g><g><title>hello_kafka`DYLD-STUB$$memcpy (82 samples, 0.04%)</title><rect x="29.0440%" y="357" width="0.0422%" height="15" fill="rgb(247,98,35)" fg:x="56501" fg:w="82"/><text x="29.2940%" y="367.50"></text></g><g><title>hello_kafka`__rdl_alloc (86 samples, 0.04%)</title><rect x="29.0913%" y="357" width="0.0442%" height="15" fill="rgb(247,138,52)" fg:x="56593" fg:w="86"/><text x="29.3413%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,187 samples, 1.12%)</title><rect x="29.6963%" y="341" width="1.1242%" height="15" fill="rgb(213,79,30)" fg:x="57770" fg:w="2187"/><text x="29.9463%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (3,859 samples, 1.98%)</title><rect x="30.8205%" y="341" width="1.9837%" height="15" fill="rgb(246,177,23)" fg:x="59957" fg:w="3859"/><text x="31.0705%" y="351.50">l..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (72 samples, 0.04%)</title><rect x="32.8556%" y="325" width="0.0370%" height="15" fill="rgb(230,62,27)" fg:x="63916" fg:w="72"/><text x="33.1056%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (213 samples, 0.11%)</title><rect x="32.8042%" y="341" width="0.1095%" height="15" fill="rgb(216,154,8)" fg:x="63816" fg:w="213"/><text x="33.0542%" y="351.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (41 samples, 0.02%)</title><rect x="32.8926%" y="325" width="0.0211%" height="15" fill="rgb(244,35,45)" fg:x="63988" fg:w="41"/><text x="33.1426%" y="335.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (91 samples, 0.05%)</title><rect x="32.9142%" y="341" width="0.0468%" height="15" fill="rgb(251,115,12)" fg:x="64030" fg:w="91"/><text x="33.1642%" y="351.50"></text></g><g><title>hello_kafka`dashmap::lock::RawRwLock::lock_exclusive_slow (7,471 samples, 3.84%)</title><rect x="29.1401%" y="357" width="3.8404%" height="15" fill="rgb(240,54,50)" fg:x="56688" fg:w="7471"/><text x="29.3901%" y="367.50">hell..</text></g><g><title>hello_kafka`dashmap::lock::RawRwLock::unlock_exclusive_slow (70 samples, 0.04%)</title><rect x="32.9805%" y="357" width="0.0360%" height="15" fill="rgb(233,84,52)" fg:x="64159" fg:w="70"/><text x="33.2305%" y="367.50"></text></g><g><title>hello_kafka`&lt;kafkas::producer::aggregator::RecordAggregator as kafkas::producer::aggregator::Aggregator&gt;::try_push (3,369 samples, 1.73%)</title><rect x="35.8859%" y="341" width="1.7318%" height="15" fill="rgb(207,117,47)" fg:x="69811" fg:w="3369"/><text x="36.1359%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,851 samples, 1.47%)</title><rect x="36.1522%" y="325" width="1.4655%" height="15" fill="rgb(249,43,39)" fg:x="70329" fg:w="2851"/><text x="36.4022%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (31 samples, 0.02%)</title><rect x="37.6203%" y="341" width="0.0159%" height="15" fill="rgb(209,38,44)" fg:x="73185" fg:w="31"/><text x="37.8703%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1,101 samples, 0.57%)</title><rect x="40.7076%" y="325" width="0.5660%" height="15" fill="rgb(236,212,23)" fg:x="79191" fg:w="1101"/><text x="40.9576%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (602 samples, 0.31%)</title><rect x="40.9641%" y="309" width="0.3095%" height="15" fill="rgb(242,79,21)" fg:x="79690" fg:w="602"/><text x="41.2141%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (63 samples, 0.03%)</title><rect x="41.2412%" y="293" width="0.0324%" height="15" fill="rgb(211,96,35)" fg:x="80229" fg:w="63"/><text x="41.4912%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7,080 samples, 3.64%)</title><rect x="37.6362%" y="341" width="3.6394%" height="15" fill="rgb(253,215,40)" fg:x="73216" fg:w="7080"/><text x="37.8862%" y="351.50">libs..</text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (84 samples, 0.04%)</title><rect x="41.2757%" y="341" width="0.0432%" height="15" fill="rgb(211,81,21)" fg:x="80296" fg:w="84"/><text x="41.5257%" y="351.50"></text></g><g><title>hello_kafka`kafkas::producer::batch::ProducerBatch::try_push (17,764 samples, 9.13%)</title><rect x="33.0165%" y="357" width="9.1315%" height="15" fill="rgb(208,190,38)" fg:x="64229" fg:w="17764"/><text x="33.2665%" y="367.50">hello_kafka`k..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,613 samples, 0.83%)</title><rect x="41.3188%" y="341" width="0.8292%" height="15" fill="rgb(235,213,38)" fg:x="80380" fg:w="1613"/><text x="41.5688%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (524 samples, 0.27%)</title><rect x="42.1634%" y="357" width="0.2694%" height="15" fill="rgb(237,122,38)" fg:x="82023" fg:w="524"/><text x="42.4134%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`malloc (67 samples, 0.03%)</title><rect x="42.4328%" y="357" width="0.0344%" height="15" fill="rgb(244,218,35)" fg:x="82547" fg:w="67"/><text x="42.6828%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (47 samples, 0.02%)</title><rect x="42.4672%" y="357" width="0.0242%" height="15" fill="rgb(240,68,47)" fg:x="82614" fg:w="47"/><text x="42.7172%" y="367.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (150 samples, 0.08%)</title><rect x="42.4914%" y="357" width="0.0771%" height="15" fill="rgb(210,16,53)" fg:x="82661" fg:w="150"/><text x="42.7414%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (703 samples, 0.36%)</title><rect x="42.5685%" y="357" width="0.3614%" height="15" fill="rgb(235,124,12)" fg:x="82811" fg:w="703"/><text x="42.8185%" y="367.50"></text></g><g><title>libsystem_pthread.dylib`cthread_yield (54 samples, 0.03%)</title><rect x="42.9314%" y="357" width="0.0278%" height="15" fill="rgb(224,169,11)" fg:x="83517" fg:w="54"/><text x="43.1814%" y="367.50"></text></g><g><title>hello_kafka`kafkas::producer::TopicProducer&lt;Exe&gt;::try_push::_{{closure}} (34,843 samples, 17.91%)</title><rect x="25.0699%" y="373" width="17.9108%" height="15" fill="rgb(250,166,2)" fg:x="48770" fg:w="34843"/><text x="25.3199%" y="383.50">hello_kafka`kafkas::producer..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (36 samples, 0.02%)</title><rect x="42.9622%" y="357" width="0.0185%" height="15" fill="rgb(242,216,29)" fg:x="83577" fg:w="36"/><text x="43.2122%" y="367.50"></text></g><g><title>hello_kafka`kafkas::producer::batch::ProducerBatch::try_push (56 samples, 0.03%)</title><rect x="42.9807%" y="373" width="0.0288%" height="15" fill="rgb(230,116,27)" fg:x="83613" fg:w="56"/><text x="43.2307%" y="383.50"></text></g><g><title>hello_kafka`kafkas::producer::partitioner::RoundRobinPartitioner::next_value (868 samples, 0.45%)</title><rect x="43.0095%" y="373" width="0.4462%" height="15" fill="rgb(228,99,48)" fg:x="83669" fg:w="868"/><text x="43.2595%" y="383.50"></text></g><g><title>libdyld.dylib`0x7ff8143c99f1 (48 samples, 0.02%)</title><rect x="43.4557%" y="373" width="0.0247%" height="15" fill="rgb(253,11,6)" fg:x="84537" fg:w="48"/><text x="43.7057%" y="383.50"></text></g><g><title>libdyld.dylib`0x7ff8143c99f5 (21 samples, 0.01%)</title><rect x="43.4804%" y="373" width="0.0108%" height="15" fill="rgb(247,143,39)" fg:x="84585" fg:w="21"/><text x="43.7304%" y="383.50"></text></g><g><title>libdyld.dylib`0x7ff8143c99fe (47 samples, 0.02%)</title><rect x="43.4912%" y="373" width="0.0242%" height="15" fill="rgb(236,97,10)" fg:x="84606" fg:w="47"/><text x="43.7412%" y="383.50"></text></g><g><title>libdyld.dylib`0x7ff8143c9a03 (23 samples, 0.01%)</title><rect x="43.5153%" y="373" width="0.0118%" height="15" fill="rgb(233,208,19)" fg:x="84653" fg:w="23"/><text x="43.7653%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (534 samples, 0.27%)</title><rect x="43.5282%" y="373" width="0.2745%" height="15" fill="rgb(216,164,2)" fg:x="84678" fg:w="534"/><text x="43.7782%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`malloc (92 samples, 0.05%)</title><rect x="43.8027%" y="373" width="0.0473%" height="15" fill="rgb(220,129,5)" fg:x="85212" fg:w="92"/><text x="44.0527%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (59 samples, 0.03%)</title><rect x="43.8500%" y="373" width="0.0303%" height="15" fill="rgb(242,17,10)" fg:x="85304" fg:w="59"/><text x="44.1000%" y="383.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memcmp (41 samples, 0.02%)</title><rect x="43.8803%" y="373" width="0.0211%" height="15" fill="rgb(242,107,0)" fg:x="85363" fg:w="41"/><text x="44.1303%" y="383.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (115 samples, 0.06%)</title><rect x="43.9014%" y="373" width="0.0591%" height="15" fill="rgb(251,28,31)" fg:x="85404" fg:w="115"/><text x="44.1514%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp$VARIANT$Base (50 samples, 0.03%)</title><rect x="43.9605%" y="373" width="0.0257%" height="15" fill="rgb(233,223,10)" fg:x="85519" fg:w="50"/><text x="44.2105%" y="383.50"></text></g><g><title>hello_kafka`hello_kafka::main::_{{closure}} (87,288 samples, 44.87%)</title><rect x="0.1501%" y="389" width="44.8698%" height="15" fill="rgb(215,21,27)" fg:x="292" fg:w="87288"/><text x="0.4001%" y="399.50">hello_kafka`hello_kafka::main::_{{closure}}</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,011 samples, 1.03%)</title><rect x="43.9862%" y="373" width="1.0337%" height="15" fill="rgb(232,23,21)" fg:x="85569" fg:w="2011"/><text x="44.2362%" y="383.50"></text></g><g><title>hello_kafka`kafkas::client::Kafka&lt;Exe&gt;::partitions::_{{closure}} (39 samples, 0.02%)</title><rect x="45.0199%" y="389" width="0.0200%" height="15" fill="rgb(244,5,23)" fg:x="87580" fg:w="39"/><text x="45.2699%" y="399.50"></text></g><g><title>hello_kafka`kafkas::metadata::Cluster::available_partitions (33 samples, 0.02%)</title><rect x="45.0400%" y="389" width="0.0170%" height="15" fill="rgb(226,81,46)" fg:x="87619" fg:w="33"/><text x="45.2900%" y="399.50"></text></g><g><title>hello_kafka`kafkas::producer::TopicProducer&lt;Exe&gt;::try_push::_{{closure}} (40 samples, 0.02%)</title><rect x="45.0570%" y="389" width="0.0206%" height="15" fill="rgb(247,70,30)" fg:x="87652" fg:w="40"/><text x="45.3070%" y="399.50"></text></g><g><title>hello_kafka`kafkas::producer::partitioner::RoundRobinPartitioner::next_value (81 samples, 0.04%)</title><rect x="45.0775%" y="389" width="0.0416%" height="15" fill="rgb(212,68,19)" fg:x="87692" fg:w="81"/><text x="45.3275%" y="399.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (169 samples, 0.09%)</title><rect x="45.1192%" y="389" width="0.0869%" height="15" fill="rgb(240,187,13)" fg:x="87773" fg:w="169"/><text x="45.3692%" y="399.50"></text></g><g><title>hello_kafka`main (88,302 samples, 45.39%)</title><rect x="0.0000%" y="501" width="45.3911%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="88302"/><text x="0.2500%" y="511.50">hello_kafka`main</text></g><g><title>hello_kafka`std::rt::lang_start_internal (88,302 samples, 45.39%)</title><rect x="0.0000%" y="485" width="45.3911%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="88302"/><text x="0.2500%" y="495.50">hello_kafka`std::rt::lang_start_internal</text></g><g><title>hello_kafka`std::rt::lang_start::_{{closure}} (88,302 samples, 45.39%)</title><rect x="0.0000%" y="469" width="45.3911%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="88302"/><text x="0.2500%" y="479.50">hello_kafka`std::rt::lang_start::_{{closure}}</text></g><g><title>hello_kafka`std::sys_common::backtrace::__rust_begin_short_backtrace (88,302 samples, 45.39%)</title><rect x="0.0000%" y="453" width="45.3911%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="88302"/><text x="0.2500%" y="463.50">hello_kafka`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>hello_kafka`hello_kafka::main (88,302 samples, 45.39%)</title><rect x="0.0000%" y="437" width="45.3911%" height="15" fill="rgb(224,114,35)" fg:x="0" fg:w="88302"/><text x="0.2500%" y="447.50">hello_kafka`hello_kafka::main</text></g><g><title>hello_kafka`tokio::runtime::runtime::Runtime::block_on (88,301 samples, 45.39%)</title><rect x="0.0005%" y="421" width="45.3906%" height="15" fill="rgb(245,159,27)" fg:x="1" fg:w="88301"/><text x="0.2505%" y="431.50">hello_kafka`tokio::runtime::runtime::Runtime::block_on</text></g><g><title>hello_kafka`tokio::runtime::context::BlockingRegionGuard::block_on (88,301 samples, 45.39%)</title><rect x="0.0005%" y="405" width="45.3906%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="88301"/><text x="0.2505%" y="415.50">hello_kafka`tokio::runtime::context::BlockingRegionGuard::block_on</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (360 samples, 0.19%)</title><rect x="45.2060%" y="389" width="0.1851%" height="15" fill="rgb(236,23,11)" fg:x="87942" fg:w="360"/><text x="45.4560%" y="399.50"></text></g><g><title>dyld`start (88,303 samples, 45.39%)</title><rect x="0.0000%" y="517" width="45.3916%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="88303"/><text x="0.2500%" y="527.50">dyld`start</text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (34 samples, 0.02%)</title><rect x="45.6167%" y="341" width="0.0175%" height="15" fill="rgb(237,72,25)" fg:x="88741" fg:w="34"/><text x="45.8667%" y="351.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (20 samples, 0.01%)</title><rect x="45.6342%" y="341" width="0.0103%" height="15" fill="rgb(244,70,9)" fg:x="88775" fg:w="20"/><text x="45.8842%" y="351.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (155 samples, 0.08%)</title><rect x="45.6502%" y="341" width="0.0797%" height="15" fill="rgb(217,125,39)" fg:x="88806" fg:w="155"/><text x="45.9002%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (2,221 samples, 1.14%)</title><rect x="45.9735%" y="293" width="1.1417%" height="15" fill="rgb(235,36,10)" fg:x="89435" fg:w="2221"/><text x="46.2235%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (45 samples, 0.02%)</title><rect x="47.1800%" y="261" width="0.0231%" height="15" fill="rgb(251,123,47)" fg:x="91782" fg:w="45"/><text x="47.4300%" y="271.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (47 samples, 0.02%)</title><rect x="47.1794%" y="277" width="0.0242%" height="15" fill="rgb(221,13,13)" fg:x="91781" fg:w="47"/><text x="47.4294%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (54 samples, 0.03%)</title><rect x="47.2036%" y="277" width="0.0278%" height="15" fill="rgb(238,131,9)" fg:x="91828" fg:w="54"/><text x="47.4536%" y="287.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (276 samples, 0.14%)</title><rect x="47.1162%" y="293" width="0.1419%" height="15" fill="rgb(211,50,8)" fg:x="91658" fg:w="276"/><text x="47.3662%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (52 samples, 0.03%)</title><rect x="47.2314%" y="277" width="0.0267%" height="15" fill="rgb(245,182,24)" fg:x="91882" fg:w="52"/><text x="47.4814%" y="287.50"></text></g><g><title>hello_kafka`parking_lot::condvar::Condvar::wait_until_internal (2,675 samples, 1.38%)</title><rect x="45.8984%" y="309" width="1.3751%" height="15" fill="rgb(242,14,37)" fg:x="89289" fg:w="2675"/><text x="46.1484%" y="319.50"></text></g><g><title>hello_kafka`std::time::Instant::checked_duration_since (30 samples, 0.02%)</title><rect x="47.3141%" y="293" width="0.0154%" height="15" fill="rgb(246,228,12)" fg:x="92043" fg:w="30"/><text x="47.5641%" y="303.50"></text></g><g><title>hello_kafka`mio::poll::Poll::poll (51 samples, 0.03%)</title><rect x="47.3876%" y="277" width="0.0262%" height="15" fill="rgb(213,55,15)" fg:x="92186" fg:w="51"/><text x="47.6376%" y="287.50"></text></g><g><title>hello_kafka`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (30 samples, 0.02%)</title><rect x="47.4262%" y="229" width="0.0154%" height="15" fill="rgb(209,9,3)" fg:x="92261" fg:w="30"/><text x="47.6762%" y="239.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (39 samples, 0.02%)</title><rect x="47.4262%" y="245" width="0.0200%" height="15" fill="rgb(230,59,30)" fg:x="92261" fg:w="39"/><text x="47.6762%" y="255.50"></text></g><g><title>hello_kafka`tokio::runtime::io::scheduled_io::ScheduledIo::wake0 (68 samples, 0.03%)</title><rect x="47.4138%" y="277" width="0.0350%" height="15" fill="rgb(209,121,21)" fg:x="92237" fg:w="68"/><text x="47.6638%" y="287.50"></text></g><g><title>hello_kafka`tokio::runtime::task::waker::wake_by_val (46 samples, 0.02%)</title><rect x="47.4252%" y="261" width="0.0236%" height="15" fill="rgb(220,109,13)" fg:x="92259" fg:w="46"/><text x="47.6752%" y="271.50"></text></g><g><title>hello_kafka`tokio::runtime::io::Driver::turn (1,822 samples, 0.94%)</title><rect x="47.3393%" y="293" width="0.9366%" height="15" fill="rgb(232,18,1)" fg:x="92092" fg:w="1822"/><text x="47.5893%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (1,601 samples, 0.82%)</title><rect x="47.4529%" y="277" width="0.8230%" height="15" fill="rgb(215,41,42)" fg:x="92313" fg:w="1601"/><text x="47.7029%" y="287.50"></text></g><g><title>hello_kafka`tokio::runtime::time::wheel::Wheel::next_expiration (32 samples, 0.02%)</title><rect x="48.3073%" y="277" width="0.0164%" height="15" fill="rgb(224,123,36)" fg:x="93975" fg:w="32"/><text x="48.5573%" y="287.50"></text></g><g><title>hello_kafka`tokio::runtime::time::wheel::level::Level::next_expiration (21 samples, 0.01%)</title><rect x="48.3129%" y="261" width="0.0108%" height="15" fill="rgb(240,125,3)" fg:x="93986" fg:w="21"/><text x="48.5629%" y="271.50"></text></g><g><title>hello_kafka`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (86 samples, 0.04%)</title><rect x="48.2800%" y="293" width="0.0442%" height="15" fill="rgb(205,98,50)" fg:x="93922" fg:w="86"/><text x="48.5300%" y="303.50"></text></g><g><title>hello_kafka`tokio::runtime::time::Driver::park_internal (2,055 samples, 1.06%)</title><rect x="47.2889%" y="309" width="1.0564%" height="15" fill="rgb(205,185,37)" fg:x="91994" fg:w="2055"/><text x="47.5389%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (21 samples, 0.01%)</title><rect x="48.3345%" y="293" width="0.0108%" height="15" fill="rgb(238,207,15)" fg:x="94028" fg:w="21"/><text x="48.5845%" y="303.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::park::Parker::park (5,104 samples, 2.62%)</title><rect x="45.7730%" y="325" width="2.6237%" height="15" fill="rgb(213,199,42)" fg:x="89045" fg:w="5104"/><text x="46.0230%" y="335.50">he..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (44 samples, 0.02%)</title><rect x="48.3741%" y="309" width="0.0226%" height="15" fill="rgb(235,201,11)" fg:x="94105" fg:w="44"/><text x="48.6241%" y="319.50"></text></g><g><title>hello_kafka`tokio::runtime::io::Driver::turn (45 samples, 0.02%)</title><rect x="48.4008%" y="309" width="0.0231%" height="15" fill="rgb(207,46,11)" fg:x="94157" fg:w="45"/><text x="48.6508%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`kevent (41 samples, 0.02%)</title><rect x="48.4029%" y="293" width="0.0211%" height="15" fill="rgb(241,35,35)" fg:x="94161" fg:w="41"/><text x="48.6529%" y="303.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (5,247 samples, 2.70%)</title><rect x="45.7298%" y="341" width="2.6972%" height="15" fill="rgb(243,32,47)" fg:x="88961" fg:w="5247"/><text x="45.9798%" y="351.50">he..</text></g><g><title>hello_kafka`tokio::runtime::time::Driver::park_internal (59 samples, 0.03%)</title><rect x="48.3967%" y="325" width="0.0303%" height="15" fill="rgb(247,202,23)" fg:x="94149" fg:w="59"/><text x="48.6467%" y="335.50"></text></g><g><title>hello_kafka`parking_lot_core::parking_lot::lock_bucket_pair (29 samples, 0.01%)</title><rect x="48.5000%" y="309" width="0.0149%" height="15" fill="rgb(219,102,11)" fg:x="94350" fg:w="29"/><text x="48.7500%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (605 samples, 0.31%)</title><rect x="48.5149%" y="309" width="0.3110%" height="15" fill="rgb(243,110,44)" fg:x="94379" fg:w="605"/><text x="48.7649%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (30 samples, 0.02%)</title><rect x="48.8341%" y="293" width="0.0154%" height="15" fill="rgb(222,74,54)" fg:x="95000" fg:w="30"/><text x="49.0841%" y="303.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (32 samples, 0.02%)</title><rect x="48.8336%" y="309" width="0.0164%" height="15" fill="rgb(216,99,12)" fg:x="94999" fg:w="32"/><text x="49.0836%" y="319.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (21 samples, 0.01%)</title><rect x="48.8501%" y="309" width="0.0108%" height="15" fill="rgb(226,22,26)" fg:x="95031" fg:w="21"/><text x="49.1001%" y="319.50"></text></g><g><title>hello_kafka`parking_lot::condvar::Condvar::notify_one_slow (769 samples, 0.40%)</title><rect x="48.4728%" y="325" width="0.3953%" height="15" fill="rgb(217,163,10)" fg:x="94297" fg:w="769"/><text x="48.7228%" y="335.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (22 samples, 0.01%)</title><rect x="48.8712%" y="325" width="0.0113%" height="15" fill="rgb(213,25,53)" fg:x="95072" fg:w="22"/><text x="49.1212%" y="335.50"></text></g><g><title>hello_kafka`&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.01%)</title><rect x="48.9200%" y="309" width="0.0134%" height="15" fill="rgb(252,105,26)" fg:x="95167" fg:w="26"/><text x="49.1700%" y="319.50"></text></g><g><title>hello_kafka`kafkas::producer::Producer&lt;Exe&gt;::new::_{{closure}}::_{{closure}} (20 samples, 0.01%)</title><rect x="48.9457%" y="309" width="0.0103%" height="15" fill="rgb(220,39,43)" fg:x="95217" fg:w="20"/><text x="49.1957%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (224 samples, 0.12%)</title><rect x="48.9771%" y="245" width="0.1151%" height="15" fill="rgb(229,68,48)" fg:x="95278" fg:w="224"/><text x="49.2271%" y="255.50"></text></g><g><title>hello_kafka`parking_lot::condvar::Condvar::notify_one_slow (266 samples, 0.14%)</title><rect x="48.9647%" y="261" width="0.1367%" height="15" fill="rgb(252,8,32)" fg:x="95254" fg:w="266"/><text x="49.2147%" y="271.50"></text></g><g><title>hello_kafka`tokio::runtime::driver::Handle::unpark (80 samples, 0.04%)</title><rect x="49.1015%" y="261" width="0.0411%" height="15" fill="rgb(223,20,43)" fg:x="95520" fg:w="80"/><text x="49.3515%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`kevent (79 samples, 0.04%)</title><rect x="49.1020%" y="245" width="0.0406%" height="15" fill="rgb(229,81,49)" fg:x="95521" fg:w="79"/><text x="49.3520%" y="255.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (46 samples, 0.02%)</title><rect x="49.1498%" y="261" width="0.0236%" height="15" fill="rgb(236,28,36)" fg:x="95614" fg:w="46"/><text x="49.3998%" y="271.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (413 samples, 0.21%)</title><rect x="48.9621%" y="277" width="0.2123%" height="15" fill="rgb(249,185,26)" fg:x="95249" fg:w="413"/><text x="49.2121%" y="287.50"></text></g><g><title>hello_kafka`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (418 samples, 0.21%)</title><rect x="48.9601%" y="293" width="0.2149%" height="15" fill="rgb(249,174,33)" fg:x="95245" fg:w="418"/><text x="49.2101%" y="303.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (427 samples, 0.22%)</title><rect x="48.9560%" y="309" width="0.2195%" height="15" fill="rgb(233,201,37)" fg:x="95237" fg:w="427"/><text x="49.2060%" y="319.50"></text></g><g><title>hello_kafka`&lt;futures_channel::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (64 samples, 0.03%)</title><rect x="51.7663%" y="277" width="0.0329%" height="15" fill="rgb(221,78,26)" fg:x="100704" fg:w="64"/><text x="52.0163%" y="287.50"></text></g><g><title>hello_kafka`&lt;futures_channel::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (3,800 samples, 1.95%)</title><rect x="51.8752%" y="261" width="1.9534%" height="15" fill="rgb(250,127,30)" fg:x="100916" fg:w="3800"/><text x="52.1252%" y="271.50">h..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,105 samples, 0.57%)</title><rect x="53.2606%" y="245" width="0.5680%" height="15" fill="rgb(230,49,44)" fg:x="103611" fg:w="1105"/><text x="53.5106%" y="255.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (32 samples, 0.02%)</title><rect x="53.8409%" y="261" width="0.0164%" height="15" fill="rgb(229,67,23)" fg:x="104740" fg:w="32"/><text x="54.0909%" y="271.50"></text></g><g><title>hello_kafka`&lt;kafkas::producer::SendFuture as core::future::future::Future&gt;::poll (4,474 samples, 2.30%)</title><rect x="51.7992%" y="277" width="2.2998%" height="15" fill="rgb(249,83,47)" fg:x="100768" fg:w="4474"/><text x="52.0492%" y="287.50">h..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (470 samples, 0.24%)</title><rect x="53.8574%" y="261" width="0.2416%" height="15" fill="rgb(215,43,3)" fg:x="104772" fg:w="470"/><text x="54.1074%" y="271.50"></text></g><g><title>hello_kafka`DYLD-STUB$$memcpy (31 samples, 0.02%)</title><rect x="54.0990%" y="277" width="0.0159%" height="15" fill="rgb(238,154,13)" fg:x="105242" fg:w="31"/><text x="54.3490%" y="287.50"></text></g><g><title>hello_kafka`alloc::sync::Arc&lt;T&gt;::drop_slow (769 samples, 0.40%)</title><rect x="54.1149%" y="277" width="0.3953%" height="15" fill="rgb(219,56,2)" fg:x="105273" fg:w="769"/><text x="54.3649%" y="287.50"></text></g><g><title>hello_kafka`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (44 samples, 0.02%)</title><rect x="54.5102%" y="277" width="0.0226%" height="15" fill="rgb(233,0,4)" fg:x="106042" fg:w="44"/><text x="54.7602%" y="287.50"></text></g><g><title>hello_kafka`__rdl_dealloc (77 samples, 0.04%)</title><rect x="55.2967%" y="261" width="0.0396%" height="15" fill="rgb(235,30,7)" fg:x="107572" fg:w="77"/><text x="55.5467%" y="271.50"></text></g><g><title>hello_kafka`__rust_dealloc (24 samples, 0.01%)</title><rect x="55.3363%" y="261" width="0.0123%" height="15" fill="rgb(250,79,13)" fg:x="107649" fg:w="24"/><text x="55.5863%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3,350 samples, 1.72%)</title><rect x="56.2924%" y="245" width="1.7220%" height="15" fill="rgb(211,146,34)" fg:x="109509" fg:w="3350"/><text x="56.5424%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (107 samples, 0.06%)</title><rect x="58.0160%" y="213" width="0.0550%" height="15" fill="rgb(228,22,38)" fg:x="112862" fg:w="107"/><text x="58.2660%" y="223.50"></text></g><g><title>hello_kafka`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (5,297 samples, 2.72%)</title><rect x="55.3486%" y="261" width="2.7229%" height="15" fill="rgb(235,168,5)" fg:x="107673" fg:w="5297"/><text x="55.5986%" y="271.50">he..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (111 samples, 0.06%)</title><rect x="58.0145%" y="245" width="0.0571%" height="15" fill="rgb(221,155,16)" fg:x="112859" fg:w="111"/><text x="58.2645%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (111 samples, 0.06%)</title><rect x="58.0145%" y="229" width="0.0571%" height="15" fill="rgb(215,215,53)" fg:x="112859" fg:w="111"/><text x="58.2645%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (44 samples, 0.02%)</title><rect x="58.0715%" y="261" width="0.0226%" height="15" fill="rgb(223,4,10)" fg:x="112970" fg:w="44"/><text x="58.3215%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (330 samples, 0.17%)</title><rect x="58.0941%" y="261" width="0.1696%" height="15" fill="rgb(234,103,6)" fg:x="113014" fg:w="330"/><text x="58.3441%" y="271.50"></text></g><g><title>hello_kafka`futures_util::stream::stream::StreamExt::poll_next_unpin (7,285 samples, 3.74%)</title><rect x="54.5328%" y="277" width="3.7448%" height="15" fill="rgb(227,97,0)" fg:x="106086" fg:w="7285"/><text x="54.7828%" y="287.50">hell..</text></g><g><title>libsystem_malloc.dylib`nanov2_try_free_default (27 samples, 0.01%)</title><rect x="58.2638%" y="261" width="0.0139%" height="15" fill="rgb(234,150,53)" fg:x="113344" fg:w="27"/><text x="58.5138%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (33 samples, 0.02%)</title><rect x="58.2776%" y="277" width="0.0170%" height="15" fill="rgb(228,201,54)" fg:x="113371" fg:w="33"/><text x="58.5276%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3,126 samples, 1.61%)</title><rect x="58.2946%" y="277" width="1.6069%" height="15" fill="rgb(222,22,37)" fg:x="113404" fg:w="3126"/><text x="58.5446%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (374 samples, 0.19%)</title><rect x="59.7093%" y="261" width="0.1923%" height="15" fill="rgb(237,53,32)" fg:x="116156" fg:w="374"/><text x="59.9593%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6,100 samples, 3.14%)</title><rect x="59.9956%" y="245" width="3.1357%" height="15" fill="rgb(233,25,53)" fg:x="116713" fg:w="6100"/><text x="60.2456%" y="255.50">lib..</text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free (134 samples, 0.07%)</title><rect x="63.1312%" y="245" width="0.0689%" height="15" fill="rgb(210,40,34)" fg:x="122813" fg:w="134"/><text x="63.3812%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (6,374 samples, 3.28%)</title><rect x="59.9246%" y="261" width="3.2765%" height="15" fill="rgb(241,220,44)" fg:x="116575" fg:w="6374"/><text x="60.1746%" y="271.50">lib..</text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (6,423 samples, 3.30%)</title><rect x="59.9015%" y="277" width="3.3017%" height="15" fill="rgb(235,28,35)" fg:x="116530" fg:w="6423"/><text x="60.1515%" y="287.50">lib..</text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (38 samples, 0.02%)</title><rect x="63.2048%" y="277" width="0.0195%" height="15" fill="rgb(210,56,17)" fg:x="122956" fg:w="38"/><text x="63.4548%" y="287.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (43 samples, 0.02%)</title><rect x="63.2243%" y="277" width="0.0221%" height="15" fill="rgb(224,130,29)" fg:x="122994" fg:w="43"/><text x="63.4743%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (88 samples, 0.05%)</title><rect x="63.2464%" y="277" width="0.0452%" height="15" fill="rgb(235,212,8)" fg:x="123037" fg:w="88"/><text x="63.4964%" y="287.50"></text></g><g><title>hello_kafka`&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (27,950 samples, 14.37%)</title><rect x="49.1914%" y="293" width="14.3675%" height="15" fill="rgb(223,33,50)" fg:x="95695" fg:w="27950"/><text x="49.4414%" y="303.50">hello_kafka`&lt;core::pin..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (520 samples, 0.27%)</title><rect x="63.2916%" y="277" width="0.2673%" height="15" fill="rgb(219,149,13)" fg:x="123125" fg:w="520"/><text x="63.5416%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (137 samples, 0.07%)</title><rect x="63.6360%" y="229" width="0.0704%" height="15" fill="rgb(250,156,29)" fg:x="123795" fg:w="137"/><text x="63.8860%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (118 samples, 0.06%)</title><rect x="63.6458%" y="213" width="0.0607%" height="15" fill="rgb(216,193,19)" fg:x="123814" fg:w="118"/><text x="63.8958%" y="223.50"></text></g><g><title>hello_kafka`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (173 samples, 0.09%)</title><rect x="63.6247%" y="245" width="0.0889%" height="15" fill="rgb(216,135,14)" fg:x="123773" fg:w="173"/><text x="63.8747%" y="255.50"></text></g><g><title>hello_kafka`futures_core::task::__internal::atomic_waker::AtomicWaker::register (22 samples, 0.01%)</title><rect x="63.7137%" y="245" width="0.0113%" height="15" fill="rgb(241,47,5)" fg:x="123946" fg:w="22"/><text x="63.9637%" y="255.50"></text></g><g><title>hello_kafka`&lt;futures_channel::mpsc::UnboundedReceiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (254 samples, 0.13%)</title><rect x="63.6078%" y="261" width="0.1306%" height="15" fill="rgb(233,42,35)" fg:x="123740" fg:w="254"/><text x="63.8578%" y="271.50"></text></g><g><title>hello_kafka`&lt;futures_channel::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (47 samples, 0.02%)</title><rect x="63.7383%" y="261" width="0.0242%" height="15" fill="rgb(231,13,6)" fg:x="123994" fg:w="47"/><text x="63.9883%" y="271.50"></text></g><g><title>hello_kafka`&lt;tokio_util::codec::length_delimited::LengthDelimitedCodec as tokio_util::codec::decoder::Decoder&gt;::decode (45 samples, 0.02%)</title><rect x="63.8062%" y="213" width="0.0231%" height="15" fill="rgb(207,181,40)" fg:x="124126" fg:w="45"/><text x="64.0562%" y="223.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::messages::produce_response::PartitionProduceResponse as kafka_protocol::protocol::Decodable&gt;::decode (71 samples, 0.04%)</title><rect x="63.8879%" y="133" width="0.0365%" height="15" fill="rgb(254,173,49)" fg:x="124285" fg:w="71"/><text x="64.1379%" y="143.50"></text></g><g><title>hello_kafka`bytes::bytes_mut::BytesMut::set_start (23 samples, 0.01%)</title><rect x="63.9126%" y="117" width="0.0118%" height="15" fill="rgb(221,1,38)" fg:x="124333" fg:w="23"/><text x="64.1626%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (67 samples, 0.03%)</title><rect x="63.9296%" y="133" width="0.0344%" height="15" fill="rgb(206,124,46)" fg:x="124366" fg:w="67"/><text x="64.1796%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (61 samples, 0.03%)</title><rect x="63.9326%" y="117" width="0.0314%" height="15" fill="rgb(249,21,11)" fg:x="124372" fg:w="61"/><text x="64.1826%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (37 samples, 0.02%)</title><rect x="63.9450%" y="101" width="0.0190%" height="15" fill="rgb(222,201,40)" fg:x="124396" fg:w="37"/><text x="64.1950%" y="111.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::protocol::types::Array&lt;E&gt; as kafka_protocol::protocol::Decoder&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::decode (205 samples, 0.11%)</title><rect x="63.8710%" y="149" width="0.1054%" height="15" fill="rgb(235,61,29)" fg:x="124252" fg:w="205"/><text x="64.1210%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.01%)</title><rect x="63.9640%" y="133" width="0.0123%" height="15" fill="rgb(219,207,3)" fg:x="124433" fg:w="24"/><text x="64.2140%" y="143.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::protocol::types::String as kafka_protocol::protocol::Decoder&lt;T&gt;&gt;::decode (20 samples, 0.01%)</title><rect x="63.9763%" y="149" width="0.0103%" height="15" fill="rgb(222,56,46)" fg:x="124457" fg:w="20"/><text x="64.2263%" y="159.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::messages::produce_response::TopicProduceResponse as kafka_protocol::protocol::MapDecodable&gt;::decode (290 samples, 0.15%)</title><rect x="63.8622%" y="165" width="0.1491%" height="15" fill="rgb(239,76,54)" fg:x="124235" fg:w="290"/><text x="64.1122%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (52 samples, 0.03%)</title><rect x="64.0360%" y="117" width="0.0267%" height="15" fill="rgb(231,124,27)" fg:x="124573" fg:w="52"/><text x="64.2860%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (52 samples, 0.03%)</title><rect x="64.0360%" y="101" width="0.0267%" height="15" fill="rgb(249,195,6)" fg:x="124573" fg:w="52"/><text x="64.2860%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (36 samples, 0.02%)</title><rect x="64.0442%" y="85" width="0.0185%" height="15" fill="rgb(237,174,47)" fg:x="124589" fg:w="36"/><text x="64.2942%" y="95.50"></text></g><g><title>hello_kafka`alloc::raw_vec::finish_grow (56 samples, 0.03%)</title><rect x="64.0344%" y="133" width="0.0288%" height="15" fill="rgb(206,201,31)" fg:x="124570" fg:w="56"/><text x="64.2844%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (23 samples, 0.01%)</title><rect x="64.0714%" y="101" width="0.0118%" height="15" fill="rgb(231,57,52)" fg:x="124642" fg:w="23"/><text x="64.3214%" y="111.50"></text></g><g><title>hello_kafka`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (41 samples, 0.02%)</title><rect x="64.0653%" y="117" width="0.0211%" height="15" fill="rgb(248,177,22)" fg:x="124630" fg:w="41"/><text x="64.3153%" y="127.50"></text></g><g><title>hello_kafka`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (51 samples, 0.03%)</title><rect x="64.0632%" y="133" width="0.0262%" height="15" fill="rgb(215,211,37)" fg:x="124626" fg:w="51"/><text x="64.3132%" y="143.50"></text></g><g><title>hello_kafka`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (138 samples, 0.07%)</title><rect x="64.0247%" y="149" width="0.0709%" height="15" fill="rgb(241,128,51)" fg:x="124551" fg:w="138"/><text x="64.2747%" y="159.50"></text></g><g><title>hello_kafka`indexmap::map::IndexMap&lt;K,V,S&gt;::insert (161 samples, 0.08%)</title><rect x="64.0154%" y="165" width="0.0828%" height="15" fill="rgb(227,165,31)" fg:x="124533" fg:w="161"/><text x="64.2654%" y="175.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::protocol::types::Array&lt;E&gt; as kafka_protocol::protocol::Decoder&lt;indexmap::map::IndexMap&lt;K,V&gt;&gt;&gt;::decode (475 samples, 0.24%)</title><rect x="63.8560%" y="181" width="0.2442%" height="15" fill="rgb(228,167,24)" fg:x="124223" fg:w="475"/><text x="64.1060%" y="191.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::messages::produce_response::ProduceResponse as kafka_protocol::protocol::Decodable&gt;::decode (501 samples, 0.26%)</title><rect x="63.8483%" y="197" width="0.2575%" height="15" fill="rgb(228,143,12)" fg:x="124208" fg:w="501"/><text x="64.0983%" y="207.50"></text></g><g><title>hello_kafka`core::hash::BuildHasher::hash_one (111 samples, 0.06%)</title><rect x="64.1208%" y="197" width="0.0571%" height="15" fill="rgb(249,149,8)" fg:x="124738" fg:w="111"/><text x="64.3708%" y="207.50"></text></g><g><title>hello_kafka`kafkas::protocol::KafkaCodec::decode_response (679 samples, 0.35%)</title><rect x="63.8365%" y="213" width="0.3490%" height="15" fill="rgb(243,35,44)" fg:x="124185" fg:w="679"/><text x="64.0865%" y="223.50"></text></g><g><title>hello_kafka`&lt;kafkas::protocol::KafkaCodec as tokio_util::codec::decoder::Decoder&gt;::decode (775 samples, 0.40%)</title><rect x="63.7954%" y="229" width="0.3984%" height="15" fill="rgb(246,89,9)" fg:x="124105" fg:w="775"/><text x="64.0454%" y="239.50"></text></g><g><title>hello_kafka`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (1,326 samples, 0.68%)</title><rect x="64.2318%" y="197" width="0.6816%" height="15" fill="rgb(233,213,13)" fg:x="124954" fg:w="1326"/><text x="64.4818%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (1,296 samples, 0.67%)</title><rect x="64.2472%" y="181" width="0.6662%" height="15" fill="rgb(233,141,41)" fg:x="124984" fg:w="1296"/><text x="64.4972%" y="191.50"></text></g><g><title>hello_kafka`tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (23 samples, 0.01%)</title><rect x="64.9253%" y="181" width="0.0118%" height="15" fill="rgb(239,167,4)" fg:x="126303" fg:w="23"/><text x="65.1753%" y="191.50"></text></g><g><title>hello_kafka`tokio::runtime::io::registration::Registration::poll_ready (45 samples, 0.02%)</title><rect x="64.9150%" y="197" width="0.0231%" height="15" fill="rgb(209,217,16)" fg:x="126283" fg:w="45"/><text x="65.1650%" y="207.50"></text></g><g><title>hello_kafka`tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (1,414 samples, 0.73%)</title><rect x="64.2184%" y="213" width="0.7269%" height="15" fill="rgb(219,88,35)" fg:x="124928" fg:w="1414"/><text x="64.4684%" y="223.50"></text></g><g><title>hello_kafka`tokio_util::util::poll_read_buf (1,429 samples, 0.73%)</title><rect x="64.2123%" y="229" width="0.7346%" height="15" fill="rgb(220,193,23)" fg:x="124916" fg:w="1429"/><text x="64.4623%" y="239.50"></text></g><g><title>hello_kafka`&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,R&gt; as futures_core::stream::Stream&gt;::poll_next (2,303 samples, 1.18%)</title><rect x="63.7692%" y="245" width="1.1838%" height="15" fill="rgb(230,90,52)" fg:x="124054" fg:w="2303"/><text x="64.0192%" y="255.50"></text></g><g><title>hello_kafka`futures_util::lock::bilock::BiLock&lt;T&gt;::poll_lock (34 samples, 0.02%)</title><rect x="64.9587%" y="245" width="0.0175%" height="15" fill="rgb(252,106,19)" fg:x="126368" fg:w="34"/><text x="65.2087%" y="255.50"></text></g><g><title>hello_kafka`&lt;futures_util::stream::stream::split::SplitStream&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,388 samples, 1.23%)</title><rect x="63.7625%" y="261" width="1.2275%" height="15" fill="rgb(206,74,20)" fg:x="124041" fg:w="2388"/><text x="64.0125%" y="271.50"></text></g><g><title>hello_kafka`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_entry (30 samples, 0.02%)</title><rect x="64.9911%" y="261" width="0.0154%" height="15" fill="rgb(230,138,44)" fg:x="126431" fg:w="30"/><text x="65.2411%" y="271.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (20 samples, 0.01%)</title><rect x="65.0414%" y="229" width="0.0103%" height="15" fill="rgb(235,182,43)" fg:x="126529" fg:w="20"/><text x="65.2914%" y="239.50"></text></g><g><title>hello_kafka`tokio::runtime::task::waker::wake_by_val (33 samples, 0.02%)</title><rect x="65.0409%" y="245" width="0.0170%" height="15" fill="rgb(242,16,51)" fg:x="126528" fg:w="33"/><text x="65.2909%" y="255.50"></text></g><g><title>hello_kafka`futures_channel::oneshot::Sender&lt;T&gt;::send (72 samples, 0.04%)</title><rect x="65.0255%" y="261" width="0.0370%" height="15" fill="rgb(248,9,4)" fg:x="126498" fg:w="72"/><text x="65.2755%" y="271.50"></text></g><g><title>hello_kafka`&lt;kafkas::connection::Receiver&lt;S&gt; as core::future::future::Future&gt;::poll (2,903 samples, 1.49%)</title><rect x="63.5857%" y="277" width="1.4923%" height="15" fill="rgb(210,31,22)" fg:x="123697" fg:w="2903"/><text x="63.8357%" y="287.50"></text></g><g><title>hello_kafka`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (2,966 samples, 1.52%)</title><rect x="63.5589%" y="293" width="1.5247%" height="15" fill="rgb(239,54,39)" fg:x="123645" fg:w="2966"/><text x="63.8089%" y="303.50"></text></g><g><title>hello_kafka`&lt;kafkas::executor::Interval as futures_core::stream::Stream&gt;::poll_next (21 samples, 0.01%)</title><rect x="65.0856%" y="293" width="0.0108%" height="15" fill="rgb(230,99,41)" fg:x="126615" fg:w="21"/><text x="65.3356%" y="303.50"></text></g><g><title>hello_kafka`&lt;kafkas::producer::SendFuture as core::future::future::Future&gt;::poll (34 samples, 0.02%)</title><rect x="65.0964%" y="293" width="0.0175%" height="15" fill="rgb(253,106,12)" fg:x="126636" fg:w="34"/><text x="65.3464%" y="303.50"></text></g><g><title>hello_kafka`&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (143 samples, 0.07%)</title><rect x="65.1139%" y="293" width="0.0735%" height="15" fill="rgb(213,46,41)" fg:x="126670" fg:w="143"/><text x="65.3639%" y="303.50"></text></g><g><title>hello_kafka`DYLD-STUB$$memcpy (38 samples, 0.02%)</title><rect x="65.1900%" y="293" width="0.0195%" height="15" fill="rgb(215,133,35)" fg:x="126818" fg:w="38"/><text x="65.4400%" y="303.50"></text></g><g><title>hello_kafka`__rdl_dealloc (68 samples, 0.03%)</title><rect x="65.2095%" y="293" width="0.0350%" height="15" fill="rgb(213,28,5)" fg:x="126856" fg:w="68"/><text x="65.4595%" y="303.50"></text></g><g><title>hello_kafka`alloc::sync::Arc&lt;T&gt;::drop_slow (68 samples, 0.03%)</title><rect x="65.2455%" y="293" width="0.0350%" height="15" fill="rgb(215,77,49)" fg:x="126926" fg:w="68"/><text x="65.4955%" y="303.50"></text></g><g><title>hello_kafka`core::ptr::drop_in_place&lt;kafkas::producer::Producer&lt;kafkas::executor::TokioExecutor&gt;::send_raw::{{closure}}&gt; (21 samples, 0.01%)</title><rect x="65.2805%" y="293" width="0.0108%" height="15" fill="rgb(248,100,22)" fg:x="126994" fg:w="21"/><text x="65.5305%" y="303.50"></text></g><g><title>hello_kafka`futures_util::stream::stream::StreamExt::poll_next_unpin (47 samples, 0.02%)</title><rect x="65.2913%" y="293" width="0.0242%" height="15" fill="rgb(208,67,9)" fg:x="127015" fg:w="47"/><text x="65.5413%" y="303.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (23 samples, 0.01%)</title><rect x="65.3504%" y="245" width="0.0118%" height="15" fill="rgb(219,133,21)" fg:x="127130" fg:w="23"/><text x="65.6004%" y="255.50"></text></g><g><title>hello_kafka`bytes::bytes_mut::BytesMut::split_to (23 samples, 0.01%)</title><rect x="65.3637%" y="229" width="0.0118%" height="15" fill="rgb(246,46,29)" fg:x="127156" fg:w="23"/><text x="65.6137%" y="239.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes_mut::BytesMut as kafka_protocol::protocol::buf::ByteBuf&gt;::get_bytes (28 samples, 0.01%)</title><rect x="65.3622%" y="245" width="0.0144%" height="15" fill="rgb(246,185,52)" fg:x="127153" fg:w="28"/><text x="65.6122%" y="255.50"></text></g><g><title>hello_kafka`bytes::bytes_mut::BytesMut::extend_from_slice (129 samples, 0.07%)</title><rect x="65.3833%" y="229" width="0.0663%" height="15" fill="rgb(252,136,11)" fg:x="127194" fg:w="129"/><text x="65.6333%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (129 samples, 0.07%)</title><rect x="65.3833%" y="213" width="0.0663%" height="15" fill="rgb(219,138,53)" fg:x="127194" fg:w="129"/><text x="65.6333%" y="223.50"></text></g><g><title>hello_kafka`&lt;tokio_util::codec::length_delimited::LengthDelimitedCodec as tokio_util::codec::encoder::Encoder&lt;bytes::bytes::Bytes&gt;&gt;::encode (152 samples, 0.08%)</title><rect x="65.3766%" y="245" width="0.0781%" height="15" fill="rgb(211,51,23)" fg:x="127181" fg:w="152"/><text x="65.6266%" y="255.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (21 samples, 0.01%)</title><rect x="65.4897%" y="197" width="0.0108%" height="15" fill="rgb(247,221,28)" fg:x="127401" fg:w="21"/><text x="65.7397%" y="207.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (30 samples, 0.02%)</title><rect x="65.5077%" y="181" width="0.0154%" height="15" fill="rgb(251,222,45)" fg:x="127436" fg:w="30"/><text x="65.7577%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (27 samples, 0.01%)</title><rect x="65.5375%" y="85" width="0.0139%" height="15" fill="rgb(217,162,53)" fg:x="127494" fg:w="27"/><text x="65.7875%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (25 samples, 0.01%)</title><rect x="65.5385%" y="69" width="0.0129%" height="15" fill="rgb(229,93,14)" fg:x="127496" fg:w="25"/><text x="65.7885%" y="79.50"></text></g><g><title>hello_kafka`bytes::bytes_mut::BytesMut::reserve_inner (35 samples, 0.02%)</title><rect x="65.5344%" y="149" width="0.0180%" height="15" fill="rgb(209,67,49)" fg:x="127488" fg:w="35"/><text x="65.7844%" y="159.50"></text></g><g><title>hello_kafka`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (33 samples, 0.02%)</title><rect x="65.5354%" y="133" width="0.0170%" height="15" fill="rgb(213,87,29)" fg:x="127490" fg:w="33"/><text x="65.7854%" y="143.50"></text></g><g><title>hello_kafka`alloc::raw_vec::finish_grow (33 samples, 0.02%)</title><rect x="65.5354%" y="117" width="0.0170%" height="15" fill="rgb(205,151,52)" fg:x="127490" fg:w="33"/><text x="65.7854%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (31 samples, 0.02%)</title><rect x="65.5365%" y="101" width="0.0159%" height="15" fill="rgb(253,215,39)" fg:x="127492" fg:w="31"/><text x="65.7865%" y="111.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (52 samples, 0.03%)</title><rect x="65.5287%" y="165" width="0.0267%" height="15" fill="rgb(221,220,41)" fg:x="127477" fg:w="52"/><text x="65.7787%" y="175.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::messages::produce_request::PartitionProduceData as kafka_protocol::protocol::Encodable&gt;::encode (67 samples, 0.03%)</title><rect x="65.5231%" y="181" width="0.0344%" height="15" fill="rgb(218,133,21)" fg:x="127466" fg:w="67"/><text x="65.7731%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.01%)</title><rect x="65.5930%" y="53" width="0.0103%" height="15" fill="rgb(221,193,43)" fg:x="127602" fg:w="20"/><text x="65.8430%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (30 samples, 0.02%)</title><rect x="65.5899%" y="69" width="0.0154%" height="15" fill="rgb(240,128,52)" fg:x="127596" fg:w="30"/><text x="65.8399%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (40 samples, 0.02%)</title><rect x="65.6115%" y="53" width="0.0206%" height="15" fill="rgb(253,114,12)" fg:x="127638" fg:w="40"/><text x="65.8615%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (21 samples, 0.01%)</title><rect x="65.6321%" y="37" width="0.0108%" height="15" fill="rgb(215,223,47)" fg:x="127678" fg:w="21"/><text x="65.8821%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.01%)</title><rect x="65.6321%" y="53" width="0.0113%" height="15" fill="rgb(248,225,23)" fg:x="127678" fg:w="22"/><text x="65.8821%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (135 samples, 0.07%)</title><rect x="65.6059%" y="69" width="0.0694%" height="15" fill="rgb(250,108,0)" fg:x="127627" fg:w="135"/><text x="65.8559%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (57 samples, 0.03%)</title><rect x="65.6459%" y="53" width="0.0293%" height="15" fill="rgb(228,208,7)" fg:x="127705" fg:w="57"/><text x="65.8959%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (171 samples, 0.09%)</title><rect x="65.5879%" y="85" width="0.0879%" height="15" fill="rgb(244,45,10)" fg:x="127592" fg:w="171"/><text x="65.8379%" y="95.50"></text></g><g><title>hello_kafka`alloc::raw_vec::finish_grow (204 samples, 0.10%)</title><rect x="65.5771%" y="117" width="0.1049%" height="15" fill="rgb(207,125,25)" fg:x="127571" fg:w="204"/><text x="65.8271%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (191 samples, 0.10%)</title><rect x="65.5837%" y="101" width="0.0982%" height="15" fill="rgb(210,195,18)" fg:x="127584" fg:w="191"/><text x="65.8337%" y="111.50"></text></g><g><title>hello_kafka`bytes::bytes_mut::BytesMut::reserve_inner (213 samples, 0.11%)</title><rect x="65.5730%" y="149" width="0.1095%" height="15" fill="rgb(249,80,12)" fg:x="127563" fg:w="213"/><text x="65.8230%" y="159.50"></text></g><g><title>hello_kafka`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (212 samples, 0.11%)</title><rect x="65.5735%" y="133" width="0.1090%" height="15" fill="rgb(221,65,9)" fg:x="127564" fg:w="212"/><text x="65.8235%" y="143.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (395 samples, 0.20%)</title><rect x="65.5642%" y="165" width="0.2030%" height="15" fill="rgb(235,49,36)" fg:x="127546" fg:w="395"/><text x="65.8142%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (165 samples, 0.08%)</title><rect x="65.6824%" y="149" width="0.0848%" height="15" fill="rgb(225,32,20)" fg:x="127776" fg:w="165"/><text x="65.9324%" y="159.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::protocol::types::Bytes as kafka_protocol::protocol::Encoder&lt;core::option::Option&lt;&amp;bytes::bytes::Bytes&gt;&gt;&gt;::encode (417 samples, 0.21%)</title><rect x="65.5575%" y="181" width="0.2144%" height="15" fill="rgb(215,141,46)" fg:x="127533" fg:w="417"/><text x="65.8075%" y="191.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::messages::produce_request::TopicProduceData as kafka_protocol::protocol::MapEncodable&gt;::encode (525 samples, 0.27%)</title><rect x="65.5036%" y="197" width="0.2699%" height="15" fill="rgb(250,160,47)" fg:x="127428" fg:w="525"/><text x="65.7536%" y="207.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::messages::produce_request::ProduceRequest as kafka_protocol::protocol::Encodable&gt;::encode (568 samples, 0.29%)</title><rect x="65.4876%" y="213" width="0.2920%" height="15" fill="rgb(216,222,40)" fg:x="127397" fg:w="568"/><text x="65.7376%" y="223.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (22 samples, 0.01%)</title><rect x="65.7914%" y="181" width="0.0113%" height="15" fill="rgb(234,217,39)" fg:x="127988" fg:w="22"/><text x="66.0414%" y="191.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::protocol::types::String as kafka_protocol::protocol::Encoder&lt;core::option::Option&lt;&amp;str&gt;&gt;&gt;::encode (24 samples, 0.01%)</title><rect x="65.7909%" y="197" width="0.0123%" height="15" fill="rgb(207,178,40)" fg:x="127987" fg:w="24"/><text x="66.0409%" y="207.50"></text></g><g><title>hello_kafka`&lt;kafka_protocol::messages::request_header::RequestHeader as kafka_protocol::protocol::Encodable&gt;::encode (45 samples, 0.02%)</title><rect x="65.7811%" y="213" width="0.0231%" height="15" fill="rgb(221,136,13)" fg:x="127968" fg:w="45"/><text x="66.0311%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (20 samples, 0.01%)</title><rect x="65.8403%" y="165" width="0.0103%" height="15" fill="rgb(249,199,10)" fg:x="128083" fg:w="20"/><text x="66.0903%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (21 samples, 0.01%)</title><rect x="65.8963%" y="149" width="0.0108%" height="15" fill="rgb(249,222,13)" fg:x="128192" fg:w="21"/><text x="66.1463%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (151 samples, 0.08%)</title><rect x="65.8505%" y="165" width="0.0776%" height="15" fill="rgb(244,185,38)" fg:x="128103" fg:w="151"/><text x="66.1005%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (28 samples, 0.01%)</title><rect x="65.9138%" y="149" width="0.0144%" height="15" fill="rgb(236,202,9)" fg:x="128226" fg:w="28"/><text x="66.1638%" y="159.50"></text></g><g><title>hello_kafka`bytes::bytes::promotable_even_drop (194 samples, 0.10%)</title><rect x="65.8320%" y="181" width="0.0997%" height="15" fill="rgb(250,229,37)" fg:x="128067" fg:w="194"/><text x="66.0820%" y="191.50"></text></g><g><title>hello_kafka`core::ptr::drop_in_place&lt;kafka_protocol::messages::produce_request::TopicProduceData&gt; (232 samples, 0.12%)</title><rect x="65.8218%" y="197" width="0.1193%" height="15" fill="rgb(206,174,23)" fg:x="128047" fg:w="232"/><text x="66.0718%" y="207.50"></text></g><g><title>hello_kafka`core::ptr::drop_in_place&lt;kafka_protocol::messages::produce_request::ProduceRequest&gt; (287 samples, 0.15%)</title><rect x="65.8130%" y="213" width="0.1475%" height="15" fill="rgb(211,33,43)" fg:x="128030" fg:w="287"/><text x="66.0630%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (25 samples, 0.01%)</title><rect x="65.9477%" y="197" width="0.0129%" height="15" fill="rgb(245,58,50)" fg:x="128292" fg:w="25"/><text x="66.1977%" y="207.50"></text></g><g><title>hello_kafka`kafkas::protocol::KafkaCodec::encode_request (968 samples, 0.50%)</title><rect x="65.4722%" y="229" width="0.4976%" height="15" fill="rgb(244,68,36)" fg:x="127367" fg:w="968"/><text x="65.7222%" y="239.50"></text></g><g><title>hello_kafka`kafkas::protocol::KafkaCodec::encode0 (1,003 samples, 0.52%)</title><rect x="65.4573%" y="245" width="0.5156%" height="15" fill="rgb(232,229,15)" fg:x="127338" fg:w="1003"/><text x="65.7073%" y="255.50"></text></g><g><title>hello_kafka`&lt;kafkas::protocol::KafkaCodec as tokio_util::codec::encoder::Encoder&lt;kafkas::protocol::Command&gt;&gt;::encode (1,235 samples, 0.63%)</title><rect x="65.3483%" y="261" width="0.6348%" height="15" fill="rgb(254,30,23)" fg:x="127126" fg:w="1235"/><text x="65.5983%" y="271.50"></text></g><g><title>hello_kafka`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (2,044 samples, 1.05%)</title><rect x="66.0125%" y="197" width="1.0507%" height="15" fill="rgb(235,160,14)" fg:x="128418" fg:w="2044"/><text x="66.2625%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`writev (2,036 samples, 1.05%)</title><rect x="66.0166%" y="181" width="1.0466%" height="15" fill="rgb(212,155,44)" fg:x="128426" fg:w="2036"/><text x="66.2666%" y="191.50"></text></g><g><title>hello_kafka`&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2,074 samples, 1.07%)</title><rect x="66.0068%" y="229" width="1.0661%" height="15" fill="rgb(226,2,50)" fg:x="128407" fg:w="2074"/><text x="66.2568%" y="239.50"></text></g><g><title>hello_kafka`tokio::runtime::io::registration::Registration::poll_write_io (2,072 samples, 1.07%)</title><rect x="66.0078%" y="213" width="1.0651%" height="15" fill="rgb(234,177,6)" fg:x="128409" fg:w="2072"/><text x="66.2578%" y="223.50"></text></g><g><title>hello_kafka`&lt;tokio_util::codec::framed_impl::FramedImpl&lt;T,U,W&gt; as futures_sink::Sink&lt;I&gt;&gt;::poll_flush (2,132 samples, 1.10%)</title><rect x="65.9832%" y="261" width="1.0959%" height="15" fill="rgb(217,24,9)" fg:x="128361" fg:w="2132"/><text x="66.2332%" y="271.50"></text></g><g><title>hello_kafka`tokio_util::util::poll_write_buf (2,103 samples, 1.08%)</title><rect x="65.9981%" y="245" width="1.0810%" height="15" fill="rgb(220,13,46)" fg:x="128390" fg:w="2103"/><text x="66.2481%" y="255.50"></text></g><g><title>hello_kafka`&lt;futures_util::stream::stream::split::SplitSink&lt;S,Item&gt; as futures_sink::Sink&lt;Item&gt;&gt;::poll_flush (3,438 samples, 1.77%)</title><rect x="65.3370%" y="277" width="1.7673%" height="15" fill="rgb(239,221,27)" fg:x="127104" fg:w="3438"/><text x="65.5870%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (21 samples, 0.01%)</title><rect x="67.1351%" y="229" width="0.0108%" height="15" fill="rgb(222,198,25)" fg:x="130602" fg:w="21"/><text x="67.3851%" y="239.50"></text></g><g><title>hello_kafka`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (54 samples, 0.03%)</title><rect x="67.1233%" y="245" width="0.0278%" height="15" fill="rgb(211,99,13)" fg:x="130579" fg:w="54"/><text x="67.3733%" y="255.50"></text></g><g><title>hello_kafka`futures_channel::mpsc::UnboundedReceiver&lt;T&gt;::next_message (80 samples, 0.04%)</title><rect x="67.1197%" y="261" width="0.0411%" height="15" fill="rgb(232,111,31)" fg:x="130572" fg:w="80"/><text x="67.3697%" y="271.50"></text></g><g><title>hello_kafka`futures_util::stream::stream::StreamExt::poll_next_unpin (103 samples, 0.05%)</title><rect x="67.1151%" y="277" width="0.0529%" height="15" fill="rgb(245,82,37)" fg:x="130563" fg:w="103"/><text x="67.3651%" y="287.50"></text></g><g><title>hello_kafka`kafkas::connection::Connection&lt;Exe&gt;::connect::_{{closure}}::_{{closure}} (3,626 samples, 1.86%)</title><rect x="65.3164%" y="293" width="1.8639%" height="15" fill="rgb(227,149,46)" fg:x="127064" fg:w="3626"/><text x="65.5664%" y="303.50">h..</text></g><g><title>hello_kafka`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.01%)</title><rect x="67.4379%" y="277" width="0.0123%" height="15" fill="rgb(218,36,50)" fg:x="131191" fg:w="24"/><text x="67.6879%" y="287.50"></text></g><g><title>hello_kafka`std::time::Instant::now (22 samples, 0.01%)</title><rect x="67.4980%" y="261" width="0.0113%" height="15" fill="rgb(226,80,48)" fg:x="131308" fg:w="22"/><text x="67.7480%" y="271.50"></text></g><g><title>hello_kafka`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (1,198 samples, 0.62%)</title><rect x="67.5695%" y="245" width="0.6158%" height="15" fill="rgb(238,224,15)" fg:x="131447" fg:w="1198"/><text x="67.8195%" y="255.50"></text></g><g><title>hello_kafka`&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (874 samples, 0.45%)</title><rect x="68.1853%" y="245" width="0.4493%" height="15" fill="rgb(241,136,10)" fg:x="132645" fg:w="874"/><text x="68.4353%" y="255.50"></text></g><g><title>hello_kafka`tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (718 samples, 0.37%)</title><rect x="68.2655%" y="229" width="0.3691%" height="15" fill="rgb(208,32,45)" fg:x="132801" fg:w="718"/><text x="68.5155%" y="239.50"></text></g><g><title>hello_kafka`tokio::runtime::task::waker::clone_waker (217 samples, 0.11%)</title><rect x="68.5230%" y="213" width="0.1115%" height="15" fill="rgb(207,135,9)" fg:x="133302" fg:w="217"/><text x="68.7730%" y="223.50"></text></g><g><title>hello_kafka`tokio::runtime::task::state::State::ref_inc (194 samples, 0.10%)</title><rect x="68.5349%" y="197" width="0.0997%" height="15" fill="rgb(206,86,44)" fg:x="133325" fg:w="194"/><text x="68.7849%" y="207.50"></text></g><g><title>hello_kafka`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (546 samples, 0.28%)</title><rect x="68.7472%" y="229" width="0.2807%" height="15" fill="rgb(245,177,15)" fg:x="133738" fg:w="546"/><text x="68.9972%" y="239.50"></text></g><g><title>hello_kafka`std::time::Instant::checked_duration_since (739 samples, 0.38%)</title><rect x="69.0278%" y="229" width="0.3799%" height="15" fill="rgb(206,64,50)" fg:x="134284" fg:w="739"/><text x="69.2778%" y="239.50"></text></g><g><title>hello_kafka`tokio::runtime::task::waker::wake_by_val (204 samples, 0.10%)</title><rect x="69.4123%" y="229" width="0.1049%" height="15" fill="rgb(234,36,40)" fg:x="135032" fg:w="204"/><text x="69.6623%" y="239.50"></text></g><g><title>hello_kafka`tokio::runtime::task::state::State::transition_to_notified_by_val (182 samples, 0.09%)</title><rect x="69.4237%" y="213" width="0.0936%" height="15" fill="rgb(213,64,8)" fg:x="135054" fg:w="182"/><text x="69.6737%" y="223.50"></text></g><g><title>hello_kafka`tokio::runtime::time::entry::TimerEntry::reset (2,589 samples, 1.33%)</title><rect x="68.6546%" y="245" width="1.3309%" height="15" fill="rgb(210,75,36)" fg:x="133558" fg:w="2589"/><text x="68.9046%" y="255.50"></text></g><g><title>hello_kafka`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (911 samples, 0.47%)</title><rect x="69.5172%" y="229" width="0.4683%" height="15" fill="rgb(229,88,21)" fg:x="135236" fg:w="911"/><text x="69.7672%" y="239.50"></text></g><g><title>libdyld.dylib`0x7ff8143c99f1 (20 samples, 0.01%)</title><rect x="69.9948%" y="245" width="0.0103%" height="15" fill="rgb(252,204,47)" fg:x="136165" fg:w="20"/><text x="70.2448%" y="255.50"></text></g><g><title>hello_kafka`tokio::time::interval::Interval::poll_tick (5,406 samples, 2.78%)</title><rect x="67.5191%" y="261" width="2.7789%" height="15" fill="rgb(208,77,27)" fg:x="131349" fg:w="5406"/><text x="67.7691%" y="271.50">he..</text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (543 samples, 0.28%)</title><rect x="70.0189%" y="245" width="0.2791%" height="15" fill="rgb(221,76,26)" fg:x="136212" fg:w="543"/><text x="70.2689%" y="255.50"></text></g><g><title>hello_kafka`&lt;kafkas::executor::Interval as futures_core::stream::Stream&gt;::poll_next (5,506 samples, 2.83%)</title><rect x="67.4729%" y="277" width="2.8303%" height="15" fill="rgb(225,139,18)" fg:x="131259" fg:w="5506"/><text x="67.7229%" y="287.50">he..</text></g><g><title>hello_kafka`bytes::bytes::promotable_even_drop (78 samples, 0.04%)</title><rect x="70.3273%" y="277" width="0.0401%" height="15" fill="rgb(230,137,11)" fg:x="136812" fg:w="78"/><text x="70.5773%" y="287.50"></text></g><g><title>hello_kafka`bytes::bytes::static_drop (20 samples, 0.01%)</title><rect x="70.3674%" y="277" width="0.0103%" height="15" fill="rgb(212,28,1)" fg:x="136890" fg:w="20"/><text x="70.6174%" y="287.50"></text></g><g><title>hello_kafka`core::ptr::drop_in_place&lt;kafkas::producer::Producer&lt;kafkas::executor::TokioExecutor&gt;::send_raw::{{closure}}&gt; (29 samples, 0.01%)</title><rect x="70.3890%" y="277" width="0.0149%" height="15" fill="rgb(248,164,17)" fg:x="136932" fg:w="29"/><text x="70.6390%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (22 samples, 0.01%)</title><rect x="72.3696%" y="229" width="0.0113%" height="15" fill="rgb(222,171,42)" fg:x="140785" fg:w="22"/><text x="72.6196%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (48 samples, 0.02%)</title><rect x="72.3624%" y="245" width="0.0247%" height="15" fill="rgb(243,84,45)" fg:x="140771" fg:w="48"/><text x="72.6124%" y="255.50"></text></g><g><title>hello_kafka`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.04%)</title><rect x="72.3480%" y="261" width="0.0396%" height="15" fill="rgb(252,49,23)" fg:x="140743" fg:w="77"/><text x="72.5980%" y="271.50"></text></g><g><title>hello_kafka`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (23 samples, 0.01%)</title><rect x="72.3953%" y="261" width="0.0118%" height="15" fill="rgb(215,19,7)" fg:x="140835" fg:w="23"/><text x="72.6453%" y="271.50"></text></g><g><title>hello_kafka`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.01%)</title><rect x="72.4102%" y="261" width="0.0149%" height="15" fill="rgb(238,81,41)" fg:x="140864" fg:w="29"/><text x="72.6602%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (21 samples, 0.01%)</title><rect x="72.4426%" y="229" width="0.0108%" height="15" fill="rgb(210,199,37)" fg:x="140927" fg:w="21"/><text x="72.6926%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (42 samples, 0.02%)</title><rect x="72.4750%" y="197" width="0.0216%" height="15" fill="rgb(244,192,49)" fg:x="140990" fg:w="42"/><text x="72.7250%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (60 samples, 0.03%)</title><rect x="72.4663%" y="213" width="0.0308%" height="15" fill="rgb(226,211,11)" fg:x="140973" fg:w="60"/><text x="72.7163%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_size (24 samples, 0.01%)</title><rect x="72.4976%" y="213" width="0.0123%" height="15" fill="rgb(236,162,54)" fg:x="141034" fg:w="24"/><text x="72.7476%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (126 samples, 0.06%)</title><rect x="72.4534%" y="229" width="0.0648%" height="15" fill="rgb(220,229,9)" fg:x="140948" fg:w="126"/><text x="72.7034%" y="239.50"></text></g><g><title>hello_kafka`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (163 samples, 0.08%)</title><rect x="72.4349%" y="245" width="0.0838%" height="15" fill="rgb(250,87,22)" fg:x="140912" fg:w="163"/><text x="72.6849%" y="255.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (188 samples, 0.10%)</title><rect x="72.4252%" y="261" width="0.0966%" height="15" fill="rgb(239,43,17)" fg:x="140893" fg:w="188"/><text x="72.6752%" y="271.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (21 samples, 0.01%)</title><rect x="72.5218%" y="261" width="0.0108%" height="15" fill="rgb(231,177,25)" fg:x="141081" fg:w="21"/><text x="72.7718%" y="271.50"></text></g><g><title>hello_kafka`&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (38 samples, 0.02%)</title><rect x="72.5408%" y="261" width="0.0195%" height="15" fill="rgb(219,179,1)" fg:x="141118" fg:w="38"/><text x="72.7908%" y="271.50"></text></g><g><title>hello_kafka`alloc::sync::Arc&lt;T&gt;::drop_slow (58 samples, 0.03%)</title><rect x="72.6159%" y="245" width="0.0298%" height="15" fill="rgb(238,219,53)" fg:x="141264" fg:w="58"/><text x="72.8659%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (91 samples, 0.05%)</title><rect x="72.6457%" y="245" width="0.0468%" height="15" fill="rgb(232,167,36)" fg:x="141322" fg:w="91"/><text x="72.8957%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (80 samples, 0.04%)</title><rect x="72.6925%" y="245" width="0.0411%" height="15" fill="rgb(244,19,51)" fg:x="141413" fg:w="80"/><text x="72.9425%" y="255.50"></text></g><g><title>hello_kafka`&lt;dashmap::iter::Iter&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (339 samples, 0.17%)</title><rect x="72.5603%" y="261" width="0.1743%" height="15" fill="rgb(224,6,22)" fg:x="141156" fg:w="339"/><text x="72.8103%" y="271.50"></text></g><g><title>hello_kafka`&lt;std::time::Instant as core::ops::arith::Add&lt;core::time::Duration&gt;&gt;::add (24 samples, 0.01%)</title><rect x="72.9248%" y="213" width="0.0123%" height="15" fill="rgb(224,145,5)" fg:x="141865" fg:w="24"/><text x="73.1748%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,209 samples, 0.62%)</title><rect x="72.9377%" y="213" width="0.6215%" height="15" fill="rgb(234,130,49)" fg:x="141890" fg:w="1209"/><text x="73.1877%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (42 samples, 0.02%)</title><rect x="73.5776%" y="213" width="0.0216%" height="15" fill="rgb(254,6,2)" fg:x="143135" fg:w="42"/><text x="73.8276%" y="223.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (52 samples, 0.03%)</title><rect x="73.5992%" y="213" width="0.0267%" height="15" fill="rgb(208,96,46)" fg:x="143177" fg:w="52"/><text x="73.8492%" y="223.50"></text></g><g><title>hello_kafka`dashmap::lock::RawRwLock::unlock_exclusive_slow (1,462 samples, 0.75%)</title><rect x="72.8775%" y="229" width="0.7515%" height="15" fill="rgb(239,3,39)" fg:x="141773" fg:w="1462"/><text x="73.1275%" y="239.50"></text></g><g><title>hello_kafka`alloc::sync::Arc&lt;T&gt;::drop_slow (1,545 samples, 0.79%)</title><rect x="72.8487%" y="245" width="0.7942%" height="15" fill="rgb(233,210,1)" fg:x="141717" fg:w="1545"/><text x="73.0987%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (98 samples, 0.05%)</title><rect x="73.6599%" y="245" width="0.0504%" height="15" fill="rgb(244,137,37)" fg:x="143295" fg:w="98"/><text x="73.9099%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (123 samples, 0.06%)</title><rect x="73.7103%" y="245" width="0.0632%" height="15" fill="rgb(240,136,2)" fg:x="143393" fg:w="123"/><text x="73.9603%" y="255.50"></text></g><g><title>hello_kafka`&lt;dashmap::iter::IterMut&lt;K,V,S,M&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,026 samples, 1.04%)</title><rect x="72.7346%" y="261" width="1.0415%" height="15" fill="rgb(239,18,37)" fg:x="141495" fg:w="2026"/><text x="72.9846%" y="271.50"></text></g><g><title>hello_kafka`&lt;i16 as kafka_protocol::error::ParseResponseErrorCode&gt;::is_ok (37 samples, 0.02%)</title><rect x="73.7761%" y="261" width="0.0190%" height="15" fill="rgb(218,185,22)" fg:x="143521" fg:w="37"/><text x="74.0261%" y="271.50"></text></g><g><title>hello_kafka`__rdl_dealloc (70 samples, 0.04%)</title><rect x="73.8095%" y="261" width="0.0360%" height="15" fill="rgb(225,218,4)" fg:x="143586" fg:w="70"/><text x="74.0595%" y="271.50"></text></g><g><title>hello_kafka`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_entry (20 samples, 0.01%)</title><rect x="73.8593%" y="245" width="0.0103%" height="15" fill="rgb(230,182,32)" fg:x="143683" fg:w="20"/><text x="74.1093%" y="255.50"></text></g><g><title>hello_kafka`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (34 samples, 0.02%)</title><rect x="73.8563%" y="261" width="0.0175%" height="15" fill="rgb(242,56,43)" fg:x="143677" fg:w="34"/><text x="74.1063%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.01%)</title><rect x="73.9298%" y="229" width="0.0129%" height="15" fill="rgb(233,99,24)" fg:x="143820" fg:w="25"/><text x="74.1798%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.01%)</title><rect x="73.9308%" y="213" width="0.0118%" height="15" fill="rgb(234,209,42)" fg:x="143822" fg:w="23"/><text x="74.1808%" y="223.50"></text></g><g><title>hello_kafka`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (249 samples, 0.13%)</title><rect x="73.8866%" y="245" width="0.1280%" height="15" fill="rgb(227,7,12)" fg:x="143736" fg:w="249"/><text x="74.1366%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (140 samples, 0.07%)</title><rect x="73.9426%" y="229" width="0.0720%" height="15" fill="rgb(245,203,43)" fg:x="143845" fg:w="140"/><text x="74.1926%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.01%)</title><rect x="74.0238%" y="245" width="0.0103%" height="15" fill="rgb(238,205,33)" fg:x="144003" fg:w="20"/><text x="74.2738%" y="255.50"></text></g><g><title>hello_kafka`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (340 samples, 0.17%)</title><rect x="73.8763%" y="261" width="0.1748%" height="15" fill="rgb(231,56,7)" fg:x="143716" fg:w="340"/><text x="74.1263%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (40 samples, 0.02%)</title><rect x="74.1292%" y="213" width="0.0206%" height="15" fill="rgb(244,186,29)" fg:x="144208" fg:w="40"/><text x="74.3792%" y="223.50"></text></g><g><title>hello_kafka`alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::merge_tracking_child_edge (68 samples, 0.03%)</title><rect x="74.1205%" y="229" width="0.0350%" height="15" fill="rgb(234,111,31)" fg:x="144191" fg:w="68"/><text x="74.3705%" y="239.50"></text></g><g><title>hello_kafka`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (234 samples, 0.12%)</title><rect x="74.0783%" y="245" width="0.1203%" height="15" fill="rgb(241,149,10)" fg:x="144109" fg:w="234"/><text x="74.3283%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (72 samples, 0.04%)</title><rect x="74.1616%" y="229" width="0.0370%" height="15" fill="rgb(249,206,44)" fg:x="144271" fg:w="72"/><text x="74.4116%" y="239.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (27 samples, 0.01%)</title><rect x="74.1986%" y="245" width="0.0139%" height="15" fill="rgb(251,153,30)" fg:x="144343" fg:w="27"/><text x="74.4486%" y="255.50"></text></g><g><title>hello_kafka`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (327 samples, 0.17%)</title><rect x="74.0598%" y="261" width="0.1681%" height="15" fill="rgb(239,152,38)" fg:x="144073" fg:w="327"/><text x="74.3098%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (30 samples, 0.02%)</title><rect x="74.2125%" y="245" width="0.0154%" height="15" fill="rgb(249,139,47)" fg:x="144370" fg:w="30"/><text x="74.4625%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (28 samples, 0.01%)</title><rect x="74.2824%" y="181" width="0.0144%" height="15" fill="rgb(244,64,35)" fg:x="144506" fg:w="28"/><text x="74.5324%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (27 samples, 0.01%)</title><rect x="74.2829%" y="165" width="0.0139%" height="15" fill="rgb(216,46,15)" fg:x="144507" fg:w="27"/><text x="74.5329%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (86 samples, 0.04%)</title><rect x="74.2603%" y="197" width="0.0442%" height="15" fill="rgb(250,74,19)" fg:x="144463" fg:w="86"/><text x="74.5103%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (110 samples, 0.06%)</title><rect x="74.2485%" y="213" width="0.0565%" height="15" fill="rgb(249,42,33)" fg:x="144440" fg:w="110"/><text x="74.4985%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (118 samples, 0.06%)</title><rect x="74.2464%" y="229" width="0.0607%" height="15" fill="rgb(242,149,17)" fg:x="144436" fg:w="118"/><text x="74.4964%" y="239.50"></text></g><g><title>hello_kafka`alloc::raw_vec::finish_grow (150 samples, 0.08%)</title><rect x="74.2366%" y="245" width="0.0771%" height="15" fill="rgb(244,29,21)" fg:x="144417" fg:w="150"/><text x="74.4866%" y="255.50"></text></g><g><title>hello_kafka`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (165 samples, 0.08%)</title><rect x="74.2300%" y="261" width="0.0848%" height="15" fill="rgb(220,130,37)" fg:x="144404" fg:w="165"/><text x="74.4800%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (39 samples, 0.02%)</title><rect x="74.3215%" y="229" width="0.0200%" height="15" fill="rgb(211,67,2)" fg:x="144582" fg:w="39"/><text x="74.5715%" y="239.50"></text></g><g><title>hello_kafka`dashmap::lock::RawRwLock::unlock_exclusive_slow (46 samples, 0.02%)</title><rect x="74.3204%" y="245" width="0.0236%" height="15" fill="rgb(235,68,52)" fg:x="144580" fg:w="46"/><text x="74.5704%" y="255.50"></text></g><g><title>hello_kafka`alloc::sync::Arc&lt;T&gt;::drop_slow (56 samples, 0.03%)</title><rect x="74.3158%" y="261" width="0.0288%" height="15" fill="rgb(246,142,3)" fg:x="144571" fg:w="56"/><text x="74.5658%" y="271.50"></text></g><g><title>hello_kafka`&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (151 samples, 0.08%)</title><rect x="74.3754%" y="245" width="0.0776%" height="15" fill="rgb(241,25,7)" fg:x="144687" fg:w="151"/><text x="74.6254%" y="255.50"></text></g><g><title>hello_kafka`bytes::bytes::promotable_even_drop (3,196 samples, 1.64%)</title><rect x="74.3461%" y="261" width="1.6429%" height="15" fill="rgb(242,119,39)" fg:x="144630" fg:w="3196"/><text x="74.5961%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2,987 samples, 1.54%)</title><rect x="74.4536%" y="245" width="1.5354%" height="15" fill="rgb(241,98,45)" fg:x="144839" fg:w="2987"/><text x="74.7036%" y="255.50"></text></g><g><title>hello_kafka`futures_channel::oneshot::Sender&lt;T&gt;::send (41 samples, 0.02%)</title><rect x="76.0307%" y="261" width="0.0211%" height="15" fill="rgb(254,28,30)" fg:x="147907" fg:w="41"/><text x="76.2807%" y="271.50"></text></g><g><title>hello_kafka`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.01%)</title><rect x="76.0779%" y="213" width="0.0129%" height="15" fill="rgb(241,142,54)" fg:x="147999" fg:w="25"/><text x="76.3279%" y="223.50"></text></g><g><title>hello_kafka`hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (33 samples, 0.02%)</title><rect x="76.0744%" y="229" width="0.0170%" height="15" fill="rgb(222,85,15)" fg:x="147992" fg:w="33"/><text x="76.3244%" y="239.50"></text></g><g><title>hello_kafka`indexmap::map::IndexMap&lt;K,V,S&gt;::insert (82 samples, 0.04%)</title><rect x="76.0517%" y="261" width="0.0422%" height="15" fill="rgb(210,85,47)" fg:x="147948" fg:w="82"/><text x="76.3017%" y="271.50"></text></g><g><title>hello_kafka`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_full (70 samples, 0.04%)</title><rect x="76.0579%" y="245" width="0.0360%" height="15" fill="rgb(224,206,25)" fg:x="147960" fg:w="70"/><text x="76.3079%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (117 samples, 0.06%)</title><rect x="77.1852%" y="181" width="0.0601%" height="15" fill="rgb(243,201,19)" fg:x="150153" fg:w="117"/><text x="77.4352%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (77 samples, 0.04%)</title><rect x="77.2453%" y="181" width="0.0396%" height="15" fill="rgb(236,59,4)" fg:x="150270" fg:w="77"/><text x="77.4953%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (84 samples, 0.04%)</title><rect x="77.3194%" y="149" width="0.0432%" height="15" fill="rgb(254,179,45)" fg:x="150414" fg:w="84"/><text x="77.5694%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (99 samples, 0.05%)</title><rect x="77.3759%" y="133" width="0.0509%" height="15" fill="rgb(226,14,10)" fg:x="150524" fg:w="99"/><text x="77.6259%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (187 samples, 0.10%)</title><rect x="77.4268%" y="133" width="0.0961%" height="15" fill="rgb(244,27,41)" fg:x="150623" fg:w="187"/><text x="77.6768%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (322 samples, 0.17%)</title><rect x="77.3625%" y="149" width="0.1655%" height="15" fill="rgb(235,35,32)" fg:x="150498" fg:w="322"/><text x="77.6125%" y="159.50"></text></g><g><title>hello_kafka`alloc::raw_vec::finish_grow (712 samples, 0.37%)</title><rect x="77.1662%" y="197" width="0.3660%" height="15" fill="rgb(218,68,31)" fg:x="150116" fg:w="712"/><text x="77.4162%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (481 samples, 0.25%)</title><rect x="77.2849%" y="181" width="0.2473%" height="15" fill="rgb(207,120,37)" fg:x="150347" fg:w="481"/><text x="77.5349%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (443 samples, 0.23%)</title><rect x="77.3045%" y="165" width="0.2277%" height="15" fill="rgb(227,98,0)" fg:x="150385" fg:w="443"/><text x="77.5545%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.01%)</title><rect x="77.5322%" y="197" width="0.0139%" height="15" fill="rgb(207,7,3)" fg:x="150828" fg:w="27"/><text x="77.7822%" y="207.50"></text></g><g><title>hello_kafka`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (790 samples, 0.41%)</title><rect x="77.1461%" y="213" width="0.4061%" height="15" fill="rgb(206,98,19)" fg:x="150077" fg:w="790"/><text x="77.3961%" y="223.50"></text></g><g><title>hello_kafka`bytes::bytes_mut::BytesMut::reserve_inner (840 samples, 0.43%)</title><rect x="77.1235%" y="229" width="0.4318%" height="15" fill="rgb(217,5,26)" fg:x="150033" fg:w="840"/><text x="77.3735%" y="239.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (1,407 samples, 0.72%)</title><rect x="76.8732%" y="245" width="0.7233%" height="15" fill="rgb(235,190,38)" fg:x="149546" fg:w="1407"/><text x="77.1232%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (80 samples, 0.04%)</title><rect x="77.5553%" y="229" width="0.0411%" height="15" fill="rgb(247,86,24)" fg:x="150873" fg:w="80"/><text x="77.8053%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (42 samples, 0.02%)</title><rect x="77.6489%" y="181" width="0.0216%" height="15" fill="rgb(205,101,16)" fg:x="151055" fg:w="42"/><text x="77.8989%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (20 samples, 0.01%)</title><rect x="77.6807%" y="165" width="0.0103%" height="15" fill="rgb(246,168,33)" fg:x="151117" fg:w="20"/><text x="77.9307%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (33 samples, 0.02%)</title><rect x="77.6982%" y="149" width="0.0170%" height="15" fill="rgb(231,114,1)" fg:x="151151" fg:w="33"/><text x="77.9482%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (54 samples, 0.03%)</title><rect x="77.6910%" y="165" width="0.0278%" height="15" fill="rgb(207,184,53)" fg:x="151137" fg:w="54"/><text x="77.9410%" y="175.50"></text></g><g><title>hello_kafka`alloc::raw_vec::finish_grow (154 samples, 0.08%)</title><rect x="77.6412%" y="197" width="0.0792%" height="15" fill="rgb(224,95,51)" fg:x="151040" fg:w="154"/><text x="77.8912%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (97 samples, 0.05%)</title><rect x="77.6705%" y="181" width="0.0499%" height="15" fill="rgb(212,188,45)" fg:x="151097" fg:w="97"/><text x="77.9205%" y="191.50"></text></g><g><title>hello_kafka`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (185 samples, 0.10%)</title><rect x="77.6293%" y="213" width="0.0951%" height="15" fill="rgb(223,154,38)" fg:x="151017" fg:w="185"/><text x="77.8793%" y="223.50"></text></g><g><title>hello_kafka`bytes::bytes_mut::BytesMut::reserve_inner (197 samples, 0.10%)</title><rect x="77.6237%" y="229" width="0.1013%" height="15" fill="rgb(251,22,52)" fg:x="151006" fg:w="197"/><text x="77.8737%" y="239.50"></text></g><g><title>hello_kafka`bytes::bytes_mut::BytesMut::resize (245 samples, 0.13%)</title><rect x="77.6144%" y="245" width="0.1259%" height="15" fill="rgb(229,209,22)" fg:x="150988" fg:w="245"/><text x="77.8644%" y="255.50"></text></g><g><title>hello_kafka`crc::crc32::_&lt;impl crc::Crc&lt;u32&gt;&gt;::checksum (5,071 samples, 2.61%)</title><rect x="77.7404%" y="245" width="2.6067%" height="15" fill="rgb(234,138,34)" fg:x="151233" fg:w="5071"/><text x="77.9904%" y="255.50">he..</text></g><g><title>hello_kafka`kafka_protocol::records::Record::compute_size_new (49 samples, 0.03%)</title><rect x="80.3522%" y="245" width="0.0252%" height="15" fill="rgb(212,95,11)" fg:x="156314" fg:w="49"/><text x="80.6022%" y="255.50"></text></g><g><title>hello_kafka`__rdl_realloc (22 samples, 0.01%)</title><rect x="82.2125%" y="165" width="0.0113%" height="15" fill="rgb(240,179,47)" fg:x="159933" fg:w="22"/><text x="82.4625%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (166 samples, 0.09%)</title><rect x="82.2259%" y="165" width="0.0853%" height="15" fill="rgb(240,163,11)" fg:x="159959" fg:w="166"/><text x="82.4759%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (102 samples, 0.05%)</title><rect x="82.3812%" y="133" width="0.0524%" height="15" fill="rgb(236,37,12)" fg:x="160261" fg:w="102"/><text x="82.6312%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (228 samples, 0.12%)</title><rect x="82.4624%" y="117" width="0.1172%" height="15" fill="rgb(232,164,16)" fg:x="160419" fg:w="228"/><text x="82.7124%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (26 samples, 0.01%)</title><rect x="82.5662%" y="101" width="0.0134%" height="15" fill="rgb(244,205,15)" fg:x="160621" fg:w="26"/><text x="82.8162%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (255 samples, 0.13%)</title><rect x="82.5796%" y="117" width="0.1311%" height="15" fill="rgb(223,117,47)" fg:x="160647" fg:w="255"/><text x="82.8296%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (245 samples, 0.13%)</title><rect x="82.7107%" y="117" width="0.1259%" height="15" fill="rgb(244,107,35)" fg:x="160902" fg:w="245"/><text x="82.9607%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (231 samples, 0.12%)</title><rect x="82.7179%" y="101" width="0.1187%" height="15" fill="rgb(205,140,8)" fg:x="160916" fg:w="231"/><text x="82.9679%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (97 samples, 0.05%)</title><rect x="82.7867%" y="85" width="0.0499%" height="15" fill="rgb(228,84,46)" fg:x="161050" fg:w="97"/><text x="83.0367%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (880 samples, 0.45%)</title><rect x="82.4336%" y="133" width="0.4524%" height="15" fill="rgb(254,188,9)" fg:x="160363" fg:w="880"/><text x="82.6836%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (85 samples, 0.04%)</title><rect x="82.8423%" y="117" width="0.0437%" height="15" fill="rgb(206,112,54)" fg:x="161158" fg:w="85"/><text x="83.0923%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (101 samples, 0.05%)</title><rect x="82.9677%" y="101" width="0.0519%" height="15" fill="rgb(216,84,49)" fg:x="161402" fg:w="101"/><text x="83.2177%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (23 samples, 0.01%)</title><rect x="83.0196%" y="101" width="0.0118%" height="15" fill="rgb(214,194,35)" fg:x="161503" fg:w="23"/><text x="83.2696%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (213 samples, 0.11%)</title><rect x="82.9224%" y="117" width="0.1095%" height="15" fill="rgb(249,28,3)" fg:x="161314" fg:w="213"/><text x="83.1724%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (35 samples, 0.02%)</title><rect x="83.1558%" y="69" width="0.0180%" height="15" fill="rgb(222,56,52)" fg:x="161768" fg:w="35"/><text x="83.4058%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (316 samples, 0.16%)</title><rect x="83.0350%" y="117" width="0.1624%" height="15" fill="rgb(245,217,50)" fg:x="161533" fg:w="316"/><text x="83.2850%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (300 samples, 0.15%)</title><rect x="83.0432%" y="101" width="0.1542%" height="15" fill="rgb(213,201,24)" fg:x="161549" fg:w="300"/><text x="83.2932%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (165 samples, 0.08%)</title><rect x="83.1126%" y="85" width="0.0848%" height="15" fill="rgb(248,116,28)" fg:x="161684" fg:w="165"/><text x="83.3626%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (39 samples, 0.02%)</title><rect x="83.1774%" y="69" width="0.0200%" height="15" fill="rgb(219,72,43)" fg:x="161810" fg:w="39"/><text x="83.4274%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (27 samples, 0.01%)</title><rect x="83.1975%" y="117" width="0.0139%" height="15" fill="rgb(209,138,14)" fg:x="161849" fg:w="27"/><text x="83.4475%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (24 samples, 0.01%)</title><rect x="83.1990%" y="101" width="0.0123%" height="15" fill="rgb(222,18,33)" fg:x="161852" fg:w="24"/><text x="83.4490%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (630 samples, 0.32%)</title><rect x="82.8993%" y="133" width="0.3238%" height="15" fill="rgb(213,199,7)" fg:x="161269" fg:w="630"/><text x="83.1493%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (22 samples, 0.01%)</title><rect x="83.2118%" y="117" width="0.0113%" height="15" fill="rgb(250,110,10)" fg:x="161877" fg:w="22"/><text x="83.4618%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1,707 samples, 0.88%)</title><rect x="82.3539%" y="149" width="0.8775%" height="15" fill="rgb(248,123,6)" fg:x="160208" fg:w="1707"/><text x="82.6039%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (46 samples, 0.02%)</title><rect x="83.2365%" y="149" width="0.0236%" height="15" fill="rgb(206,91,31)" fg:x="161925" fg:w="46"/><text x="83.4865%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (39 samples, 0.02%)</title><rect x="83.2401%" y="133" width="0.0200%" height="15" fill="rgb(211,154,13)" fg:x="161932" fg:w="39"/><text x="83.4901%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1,847 samples, 0.95%)</title><rect x="82.3112%" y="165" width="0.9494%" height="15" fill="rgb(225,148,7)" fg:x="160125" fg:w="1847"/><text x="82.5612%" y="175.50"></text></g><g><title>hello_kafka`alloc::raw_vec::finish_grow (2,062 samples, 1.06%)</title><rect x="82.2012%" y="181" width="1.0600%" height="15" fill="rgb(220,160,43)" fg:x="159911" fg:w="2062"/><text x="82.4512%" y="191.50"></text></g><g><title>hello_kafka`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,128 samples, 1.09%)</title><rect x="82.1735%" y="197" width="1.0939%" height="15" fill="rgb(213,52,39)" fg:x="159857" fg:w="2128"/><text x="82.4235%" y="207.50"></text></g><g><title>hello_kafka`bytes::bytes_mut::BytesMut::reserve_inner (2,191 samples, 1.13%)</title><rect x="82.1416%" y="213" width="1.1263%" height="15" fill="rgb(243,137,7)" fg:x="159795" fg:w="2191"/><text x="82.3916%" y="223.50"></text></g><g><title>hello_kafka`&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put_slice (6,541 samples, 3.36%)</title><rect x="80.9799%" y="229" width="3.3624%" height="15" fill="rgb(230,79,13)" fg:x="157535" fg:w="6541"/><text x="81.2299%" y="239.50">hel..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,090 samples, 1.07%)</title><rect x="83.2679%" y="213" width="1.0744%" height="15" fill="rgb(247,105,23)" fg:x="161986" fg:w="2090"/><text x="83.5179%" y="223.50"></text></g><g><title>hello_kafka`DYLD-STUB$$memcpy (122 samples, 0.06%)</title><rect x="84.3422%" y="229" width="0.0627%" height="15" fill="rgb(223,179,41)" fg:x="164076" fg:w="122"/><text x="84.5922%" y="239.50"></text></g><g><title>hello_kafka`kafka_protocol::records::Record::compute_size_new (581 samples, 0.30%)</title><rect x="84.4121%" y="229" width="0.2987%" height="15" fill="rgb(218,9,34)" fg:x="164212" fg:w="581"/><text x="84.6621%" y="239.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (255 samples, 0.13%)</title><rect x="84.7108%" y="229" width="0.1311%" height="15" fill="rgb(222,106,8)" fg:x="164793" fg:w="255"/><text x="84.9608%" y="239.50"></text></g><g><title>hello_kafka`kafka_protocol::records::RecordBatchEncoder::encode_new_records (8,960 samples, 4.61%)</title><rect x="80.3774%" y="245" width="4.6058%" height="15" fill="rgb(211,220,0)" fg:x="156363" fg:w="8960"/><text x="80.6274%" y="255.50">hello..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (275 samples, 0.14%)</title><rect x="84.8419%" y="229" width="0.1414%" height="15" fill="rgb(229,52,16)" fg:x="165048" fg:w="275"/><text x="85.0919%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (21 samples, 0.01%)</title><rect x="84.9966%" y="245" width="0.0108%" height="15" fill="rgb(212,155,18)" fg:x="165349" fg:w="21"/><text x="85.2466%" y="255.50"></text></g><g><title>hello_kafka`kafka_protocol::records::RecordBatchEncoder::encode (17,333 samples, 8.91%)</title><rect x="76.0985%" y="261" width="8.9099%" height="15" fill="rgb(242,21,14)" fg:x="148039" fg:w="17333"/><text x="76.3485%" y="271.50">hello_kafka`k..</text></g><g><title>hello_kafka`tokio::time::sleep::Sleep::new_timeout (23 samples, 0.01%)</title><rect x="85.1174%" y="197" width="0.0118%" height="15" fill="rgb(222,19,48)" fg:x="165584" fg:w="23"/><text x="85.3674%" y="207.50"></text></g><g><title>hello_kafka`tokio::time::sleep::sleep (27 samples, 0.01%)</title><rect x="85.1164%" y="213" width="0.0139%" height="15" fill="rgb(232,45,27)" fg:x="165582" fg:w="27"/><text x="85.3664%" y="223.50"></text></g><g><title>hello_kafka`&lt;kafkas::executor::TokioExecutor as kafkas::executor::Executor&gt;::delay (36 samples, 0.02%)</title><rect x="85.1143%" y="229" width="0.0185%" height="15" fill="rgb(249,103,42)" fg:x="165578" fg:w="36"/><text x="85.3643%" y="239.50"></text></g><g><title>hello_kafka`tokio::runtime::time::entry::TimerEntry::reset (37 samples, 0.02%)</title><rect x="85.1405%" y="213" width="0.0190%" height="15" fill="rgb(246,81,33)" fg:x="165629" fg:w="37"/><text x="85.3905%" y="223.50"></text></g><g><title>hello_kafka`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (29 samples, 0.01%)</title><rect x="85.1447%" y="197" width="0.0149%" height="15" fill="rgb(252,33,42)" fg:x="165637" fg:w="29"/><text x="85.3947%" y="207.50"></text></g><g><title>hello_kafka`&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (64 samples, 0.03%)</title><rect x="85.1339%" y="229" width="0.0329%" height="15" fill="rgb(209,212,41)" fg:x="165616" fg:w="64"/><text x="85.3839%" y="239.50"></text></g><g><title>hello_kafka`core::ptr::drop_in_place&lt;tokio::time::sleep::Sleep&gt; (24 samples, 0.01%)</title><rect x="85.1786%" y="229" width="0.0123%" height="15" fill="rgb(207,154,6)" fg:x="165703" fg:w="24"/><text x="85.4286%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (204 samples, 0.10%)</title><rect x="85.2516%" y="133" width="0.1049%" height="15" fill="rgb(223,64,47)" fg:x="165845" fg:w="204"/><text x="85.5016%" y="143.50"></text></g><g><title>hello_kafka`parking_lot::condvar::Condvar::notify_one_slow (256 samples, 0.13%)</title><rect x="85.2305%" y="149" width="0.1316%" height="15" fill="rgb(211,161,38)" fg:x="165804" fg:w="256"/><text x="85.4805%" y="159.50"></text></g><g><title>hello_kafka`tokio::runtime::driver::Handle::unpark (58 samples, 0.03%)</title><rect x="85.3641%" y="149" width="0.0298%" height="15" fill="rgb(219,138,40)" fg:x="166064" fg:w="58"/><text x="85.6141%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`kevent (58 samples, 0.03%)</title><rect x="85.3641%" y="133" width="0.0298%" height="15" fill="rgb(241,228,46)" fg:x="166064" fg:w="58"/><text x="85.6141%" y="143.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (51 samples, 0.03%)</title><rect x="85.4017%" y="149" width="0.0262%" height="15" fill="rgb(223,209,38)" fg:x="166137" fg:w="51"/><text x="85.6517%" y="159.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (401 samples, 0.21%)</title><rect x="85.2228%" y="165" width="0.2061%" height="15" fill="rgb(236,164,45)" fg:x="165789" fg:w="401"/><text x="85.4728%" y="175.50"></text></g><g><title>hello_kafka`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (414 samples, 0.21%)</title><rect x="85.2176%" y="181" width="0.2128%" height="15" fill="rgb(231,15,5)" fg:x="165779" fg:w="414"/><text x="85.4676%" y="191.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (422 samples, 0.22%)</title><rect x="85.2176%" y="197" width="0.2169%" height="15" fill="rgb(252,35,15)" fg:x="165779" fg:w="422"/><text x="85.4676%" y="207.50"></text></g><g><title>hello_kafka`tokio::runtime::task::waker::wake_by_val (440 samples, 0.23%)</title><rect x="85.2161%" y="213" width="0.2262%" height="15" fill="rgb(248,181,18)" fg:x="165776" fg:w="440"/><text x="85.4661%" y="223.50"></text></g><g><title>hello_kafka`futures_channel::mpsc::UnboundedSender&lt;T&gt;::unbounded_send (521 samples, 0.27%)</title><rect x="85.1909%" y="229" width="0.2678%" height="15" fill="rgb(233,39,42)" fg:x="165727" fg:w="521"/><text x="85.4409%" y="239.50"></text></g><g><title>hello_kafka`&lt;futures_channel::oneshot::Receiver&lt;T&gt; as core::future::future::Future&gt;::poll (31 samples, 0.02%)</title><rect x="85.4731%" y="213" width="0.0159%" height="15" fill="rgb(238,110,33)" fg:x="166276" fg:w="31"/><text x="85.7231%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (32 samples, 0.02%)</title><rect x="85.4993%" y="213" width="0.0164%" height="15" fill="rgb(233,195,10)" fg:x="166327" fg:w="32"/><text x="85.7493%" y="223.50"></text></g><g><title>hello_kafka`futures_util::future::future::FutureExt::poll_unpin (116 samples, 0.06%)</title><rect x="85.4592%" y="229" width="0.0596%" height="15" fill="rgb(254,105,3)" fg:x="166249" fg:w="116"/><text x="85.7092%" y="239.50"></text></g><g><title>hello_kafka`kafkas::connection::ConnectionSender&lt;Exe&gt;::send::_{{closure}} (947 samples, 0.49%)</title><rect x="85.0881%" y="245" width="0.4868%" height="15" fill="rgb(221,225,9)" fg:x="165527" fg:w="947"/><text x="85.3381%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (38 samples, 0.02%)</title><rect x="85.5554%" y="229" width="0.0195%" height="15" fill="rgb(224,227,45)" fg:x="166436" fg:w="38"/><text x="85.8054%" y="239.50"></text></g><g><title>hello_kafka`kafkas::connection_manager::ConnectionManager&lt;Exe&gt;::invoke::_{{closure}} (1,129 samples, 0.58%)</title><rect x="85.0192%" y="261" width="0.5804%" height="15" fill="rgb(229,198,43)" fg:x="165393" fg:w="1129"/><text x="85.2692%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.01%)</title><rect x="85.5872%" y="245" width="0.0123%" height="15" fill="rgb(206,209,35)" fg:x="166498" fg:w="24"/><text x="85.8372%" y="255.50"></text></g><g><title>hello_kafka`dashmap::DashMap&lt;K,V,S&gt;::get (26 samples, 0.01%)</title><rect x="85.6119%" y="245" width="0.0134%" height="15" fill="rgb(245,195,53)" fg:x="166546" fg:w="26"/><text x="85.8619%" y="255.50"></text></g><g><title>hello_kafka`kafkas::metadata::Cluster::drain_node (43 samples, 0.02%)</title><rect x="85.6042%" y="261" width="0.0221%" height="15" fill="rgb(240,92,26)" fg:x="166531" fg:w="43"/><text x="85.8542%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (27 samples, 0.01%)</title><rect x="85.6515%" y="245" width="0.0139%" height="15" fill="rgb(207,40,23)" fg:x="166623" fg:w="27"/><text x="85.9015%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_grow_and_insert_no_lock (149 samples, 0.08%)</title><rect x="85.8037%" y="213" width="0.0766%" height="15" fill="rgb(223,111,35)" fg:x="166919" fg:w="149"/><text x="86.0537%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (1,966 samples, 1.01%)</title><rect x="85.9013%" y="197" width="1.0106%" height="15" fill="rgb(229,147,28)" fg:x="167109" fg:w="1966"/><text x="86.1513%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (2,039 samples, 1.05%)</title><rect x="85.8802%" y="213" width="1.0481%" height="15" fill="rgb(211,29,28)" fg:x="167068" fg:w="2039"/><text x="86.1302%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`mach_vm_map (32 samples, 0.02%)</title><rect x="86.9119%" y="197" width="0.0164%" height="15" fill="rgb(228,72,33)" fg:x="169075" fg:w="32"/><text x="87.1619%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`large_malloc (2,425 samples, 1.25%)</title><rect x="85.6885%" y="229" width="1.2466%" height="15" fill="rgb(205,214,31)" fg:x="166695" fg:w="2425"/><text x="85.9385%" y="239.50"></text></g><g><title>hello_kafka`kafkas::producer::batch::ProducerBatch::flush (2,553 samples, 1.31%)</title><rect x="85.6268%" y="261" width="1.3124%" height="15" fill="rgb(224,111,15)" fg:x="166575" fg:w="2553"/><text x="85.8768%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,478 samples, 1.27%)</title><rect x="85.6654%" y="245" width="1.2738%" height="15" fill="rgb(253,21,26)" fg:x="166650" fg:w="2478"/><text x="85.9154%" y="255.50"></text></g><g><title>hello_kafka`&lt;i16 as kafka_protocol::error::ParseResponseErrorCode&gt;::is_ok (40 samples, 0.02%)</title><rect x="87.2147%" y="245" width="0.0206%" height="15" fill="rgb(245,139,43)" fg:x="169664" fg:w="40"/><text x="87.4647%" y="255.50"></text></g><g><title>hello_kafka`DYLD-STUB$$memcpy (27 samples, 0.01%)</title><rect x="87.2353%" y="245" width="0.0139%" height="15" fill="rgb(252,170,7)" fg:x="169704" fg:w="27"/><text x="87.4853%" y="255.50"></text></g><g><title>hello_kafka`futures_channel::oneshot::Sender&lt;T&gt;::send (11,973 samples, 6.15%)</title><rect x="87.2491%" y="245" width="6.1546%" height="15" fill="rgb(231,118,14)" fg:x="169731" fg:w="11973"/><text x="87.4991%" y="255.50">hello_ka..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (904 samples, 0.46%)</title><rect x="92.9391%" y="229" width="0.4647%" height="15" fill="rgb(238,83,0)" fg:x="180800" fg:w="904"/><text x="93.1891%" y="239.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (87 samples, 0.04%)</title><rect x="93.4053%" y="245" width="0.0447%" height="15" fill="rgb(221,39,39)" fg:x="181707" fg:w="87"/><text x="93.6553%" y="255.50"></text></g><g><title>hello_kafka`kafkas::producer::batch::Thunk::done (12,830 samples, 6.60%)</title><rect x="86.9392%" y="261" width="6.5952%" height="15" fill="rgb(222,119,46)" fg:x="169128" fg:w="12830"/><text x="87.1892%" y="271.50">hello_kaf..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (164 samples, 0.08%)</title><rect x="93.4501%" y="245" width="0.0843%" height="15" fill="rgb(222,165,49)" fg:x="181794" fg:w="164"/><text x="93.7001%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (42 samples, 0.02%)</title><rect x="93.5349%" y="261" width="0.0216%" height="15" fill="rgb(219,113,52)" fg:x="181959" fg:w="42"/><text x="93.7849%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (128 samples, 0.07%)</title><rect x="93.5565%" y="261" width="0.0658%" height="15" fill="rgb(214,7,15)" fg:x="182001" fg:w="128"/><text x="93.8065%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5,059 samples, 2.60%)</title><rect x="93.6896%" y="245" width="2.6005%" height="15" fill="rgb(235,32,4)" fg:x="182260" fg:w="5059"/><text x="93.9396%" y="255.50">li..</text></g><g><title>libsystem_malloc.dylib`large_entry_free_no_lock (150 samples, 0.08%)</title><rect x="96.5652%" y="229" width="0.0771%" height="15" fill="rgb(238,90,54)" fg:x="187854" fg:w="150"/><text x="96.8152%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (4,590 samples, 2.36%)</title><rect x="96.6736%" y="213" width="2.3595%" height="15" fill="rgb(213,208,19)" fg:x="188065" fg:w="4590"/><text x="96.9236%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`free_large (5,432 samples, 2.79%)</title><rect x="96.2917%" y="245" width="2.7923%" height="15" fill="rgb(233,156,4)" fg:x="187322" fg:w="5432"/><text x="96.5417%" y="255.50">li..</text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (4,750 samples, 2.44%)</title><rect x="96.6423%" y="229" width="2.4417%" height="15" fill="rgb(207,194,5)" fg:x="188004" fg:w="4750"/><text x="96.8923%" y="239.50">li..</text></g><g><title>libsystem_kernel.dylib`mach_vm_deallocate (99 samples, 0.05%)</title><rect x="99.0331%" y="213" width="0.0509%" height="15" fill="rgb(206,111,30)" fg:x="192655" fg:w="99"/><text x="99.2831%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`large_entry_for_pointer_no_lock (192 samples, 0.10%)</title><rect x="99.0840%" y="245" width="0.0987%" height="15" fill="rgb(243,70,54)" fg:x="192754" fg:w="192"/><text x="99.3340%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (10,827 samples, 5.57%)</title><rect x="93.6223%" y="261" width="5.5656%" height="15" fill="rgb(242,28,8)" fg:x="182129" fg:w="10827"/><text x="93.8723%" y="271.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`free (280 samples, 0.14%)</title><rect x="99.1878%" y="261" width="0.1439%" height="15" fill="rgb(219,106,18)" fg:x="192956" fg:w="280"/><text x="99.4378%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (31 samples, 0.02%)</title><rect x="99.3364%" y="261" width="0.0159%" height="15" fill="rgb(244,222,10)" fg:x="193245" fg:w="31"/><text x="99.5864%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (42 samples, 0.02%)</title><rect x="99.3585%" y="245" width="0.0216%" height="15" fill="rgb(236,179,52)" fg:x="193288" fg:w="42"/><text x="99.6085%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (59 samples, 0.03%)</title><rect x="99.3523%" y="261" width="0.0303%" height="15" fill="rgb(213,23,39)" fg:x="193276" fg:w="59"/><text x="99.6023%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_try_free_default (38 samples, 0.02%)</title><rect x="99.3970%" y="261" width="0.0195%" height="15" fill="rgb(238,48,10)" fg:x="193363" fg:w="38"/><text x="99.6470%" y="271.50"></text></g><g><title>hello_kafka`kafkas::producer::Producer&lt;Exe&gt;::send_raw::_{{closure}} (56,468 samples, 29.03%)</title><rect x="70.4158%" y="277" width="29.0270%" height="15" fill="rgb(251,196,23)" fg:x="136984" fg:w="56468"/><text x="70.6658%" y="287.50">hello_kafka`kafkas::producer::Producer&lt;Exe&gt;::se..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.01%)</title><rect x="99.4304%" y="261" width="0.0123%" height="15" fill="rgb(250,152,24)" fg:x="193428" fg:w="24"/><text x="99.6804%" y="271.50"></text></g><g><title>hello_kafka`kafkas::producer::batch::Thunk::done (58 samples, 0.03%)</title><rect x="99.4453%" y="277" width="0.0298%" height="15" fill="rgb(209,150,17)" fg:x="193457" fg:w="58"/><text x="99.6953%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (110 samples, 0.06%)</title><rect x="99.4818%" y="277" width="0.0565%" height="15" fill="rgb(234,202,34)" fg:x="193528" fg:w="110"/><text x="99.7318%" y="287.50"></text></g><g><title>hello_kafka`kafkas::producer::Producer&lt;Exe&gt;::new::_{{closure}}::_{{closure}} (63,100 samples, 32.44%)</title><rect x="67.1804%" y="293" width="32.4362%" height="15" fill="rgb(253,148,53)" fg:x="130690" fg:w="63100"/><text x="67.4304%" y="303.50">hello_kafka`kafkas::producer::Producer&lt;Exe&gt;::new::_{..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (132 samples, 0.07%)</title><rect x="99.5487%" y="277" width="0.0679%" height="15" fill="rgb(218,129,16)" fg:x="193658" fg:w="132"/><text x="99.7987%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (43 samples, 0.02%)</title><rect x="99.6397%" y="293" width="0.0221%" height="15" fill="rgb(216,85,19)" fg:x="193835" fg:w="43"/><text x="99.8897%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (239 samples, 0.12%)</title><rect x="99.6618%" y="293" width="0.1229%" height="15" fill="rgb(235,228,7)" fg:x="193878" fg:w="239"/><text x="99.9118%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_try_free_default (31 samples, 0.02%)</title><rect x="99.7892%" y="293" width="0.0159%" height="15" fill="rgb(245,175,0)" fg:x="194126" fg:w="31"/><text x="100.0392%" y="303.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (40 samples, 0.02%)</title><rect x="99.8052%" y="293" width="0.0206%" height="15" fill="rgb(208,168,36)" fg:x="194157" fg:w="40"/><text x="100.0552%" y="303.50"></text></g><g><title>hello_kafka`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (98,643 samples, 50.71%)</title><rect x="49.1755%" y="309" width="50.7068%" height="15" fill="rgb(246,171,24)" fg:x="95664" fg:w="98643"/><text x="49.4255%" y="319.50">hello_kafka`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (110 samples, 0.06%)</title><rect x="99.8257%" y="293" width="0.0565%" height="15" fill="rgb(215,142,24)" fg:x="194197" fg:w="110"/><text x="100.0757%" y="303.50"></text></g><g><title>hello_kafka`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (99,245 samples, 51.02%)</title><rect x="48.8943%" y="325" width="51.0163%" height="15" fill="rgb(250,187,7)" fg:x="95117" fg:w="99245"/><text x="49.1443%" y="335.50">hello_kafka`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>hello_kafka`tokio::runtime::task::state::State::transition_to_running (23 samples, 0.01%)</title><rect x="99.8987%" y="309" width="0.0118%" height="15" fill="rgb(228,66,33)" fg:x="194339" fg:w="23"/><text x="100.1487%" y="319.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (100,197 samples, 51.51%)</title><rect x="48.4270%" y="341" width="51.5056%" height="15" fill="rgb(234,215,21)" fg:x="94208" fg:w="100197"/><text x="48.6770%" y="351.50">hello_kafka`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>hello_kafka`tokio::runtime::task::raw::poll (51 samples, 0.03%)</title><rect x="99.9471%" y="341" width="0.0262%" height="15" fill="rgb(222,191,20)" fg:x="194433" fg:w="51"/><text x="100.1971%" y="351.50"></text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::Context::run (106,183 samples, 54.58%)</title><rect x="45.4096%" y="357" width="54.5827%" height="15" fill="rgb(245,79,54)" fg:x="88338" fg:w="106183"/><text x="45.6596%" y="367.50">hello_kafka`tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>hello_kafka`tokio::runtime::blocking::pool::Inner::run (106,222 samples, 54.60%)</title><rect x="45.3931%" y="437" width="54.6027%" height="15" fill="rgb(240,10,37)" fg:x="88306" fg:w="106222"/><text x="45.6431%" y="447.50">hello_kafka`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>hello_kafka`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (106,222 samples, 54.60%)</title><rect x="45.3931%" y="421" width="54.6027%" height="15" fill="rgb(214,192,32)" fg:x="88306" fg:w="106222"/><text x="45.6431%" y="431.50">hello_kafka`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>hello_kafka`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (106,222 samples, 54.60%)</title><rect x="45.3931%" y="405" width="54.6027%" height="15" fill="rgb(209,36,54)" fg:x="88306" fg:w="106222"/><text x="45.6431%" y="415.50">hello_kafka`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>hello_kafka`tokio::runtime::scheduler::multi_thread::worker::run (106,222 samples, 54.60%)</title><rect x="45.3931%" y="389" width="54.6027%" height="15" fill="rgb(220,10,11)" fg:x="88306" fg:w="106222"/><text x="45.6431%" y="399.50">hello_kafka`tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>hello_kafka`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (106,222 samples, 54.60%)</title><rect x="45.3931%" y="373" width="54.6027%" height="15" fill="rgb(221,106,17)" fg:x="88306" fg:w="106222"/><text x="45.6431%" y="383.50">hello_kafka`tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>hello_kafka`std::sys::unix::thread::Thread::new::thread_start (106,223 samples, 54.60%)</title><rect x="45.3931%" y="485" width="54.6033%" height="15" fill="rgb(251,142,44)" fg:x="88306" fg:w="106223"/><text x="45.6431%" y="495.50">hello_kafka`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>hello_kafka`core::ops::function::FnOnce::call_once{{vtable.shim}} (106,223 samples, 54.60%)</title><rect x="45.3931%" y="469" width="54.6033%" height="15" fill="rgb(238,13,15)" fg:x="88306" fg:w="106223"/><text x="45.6431%" y="479.50">hello_kafka`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>hello_kafka`std::sys_common::backtrace::__rust_begin_short_backtrace (106,223 samples, 54.60%)</title><rect x="45.3931%" y="453" width="54.6033%" height="15" fill="rgb(208,107,27)" fg:x="88306" fg:w="106223"/><text x="45.6431%" y="463.50">hello_kafka`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>all (194,536 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(205,136,37)" fg:x="0" fg:w="194536"/><text x="0.2500%" y="543.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (106,231 samples, 54.61%)</title><rect x="45.3926%" y="517" width="54.6074%" height="15" fill="rgb(250,205,27)" fg:x="88305" fg:w="106231"/><text x="45.6426%" y="527.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (106,230 samples, 54.61%)</title><rect x="45.3931%" y="501" width="54.6069%" height="15" fill="rgb(210,80,43)" fg:x="88306" fg:w="106230"/><text x="45.6431%" y="511.50">libsystem_pthread.dylib`_pthread_start</text></g></svg></svg>